%!PS-Adobe-3.1 EPSF-3.0%%Title: laser05box.eps%%Creator: Adobe Illustrator(R) X%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: David Hirmes%%CreationDate: 8/1/09%%BoundingBox: 0 0 492 655%%HiResBoundingBox: 0 0 491.1417 654.8858%%CropBox: 0 0 491.1417 654.8858%%LanguageLevel: 2%%DocumentData: Clean7Bit%ADOBeginClientInjection: DocumentHeader "AI10"%ADOEndClientInjection: DocumentHeader "AI10"%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)%%+ procset Adobe_CoolType_Core (2.12 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%ADOBeginClientInjection: DocumentProlog Start "AI10"%ADOEndClientInjection: DocumentProlog Start "AI10"%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 60 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup /Cyan eq{						pop (_Cyan_)					}{						dup /Magenta eq{							pop (_Magenta_)						}{							dup /Yellow eq{								pop (_Yellow_)							}{								dup /Black eq{									pop (_Black_)								}{									dup () cvn eq{										pop (Process)									}if								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 205 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put}def/driver_check_media_override{	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne	{		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix	}if}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.12 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.12 0userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dictdef}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Databegin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/argsexch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}ifdup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exchgetinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdictAdobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup where pop exch get/globaldictwhere{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{poppop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict endexch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal duplength array copy exch setglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exchdup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if defcurrentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategiesknown{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlengthadd dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init getexec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}binddef/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname nulldef/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFontexch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exchdefinefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exchmoveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsaveLevel2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall popgrestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobalexch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontNameknown{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dupbegin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dupsin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict end definefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$ObliqueSetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slengetinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exchputinterval/$match false def $SubstituteFont/$dstack countdictstack arraydictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forallpop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch poppop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]defend def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dictdup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copiedexch definefont 3 copy put pop pop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapnamelength add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontnameexch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo getdup/Registry get Registry eq exch/Ordering get Ordering eq and and{exchrestore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end endcurrentdict/$error known currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMapfindresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index subexch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getintervalexch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelseend}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfontload put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontNameknown{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFoundtrue def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategyknown{$Strategy/$BuildFont get exec}if}if end}bind put}if end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.13 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont knowndef/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevelknown{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFontfindresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exchlength sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFontfindresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vmexch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vmsetglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcodeexch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod putstringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 31 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvmsetglobal}if end}def/:{string currentfile exch readstring pop}executeonly defend ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.0010 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx excherrordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get(Error: )print dup(                    )cvs print errordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dupstring/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 indexadd 2 index length le{2 index getinterval dst_string dst_index 2 indexputinterval length dst_index add/dst_index exch def exit}{1 index length 1index sub dup 4 1 roll getinterval dst_string dst_index 2 index putintervalpop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}looppop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomarkcurrentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresourcebegin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecodefilter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 65 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				AGMIMG_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{  	 						currentoverprint not{  			 					1 AGMCORE_&setgray  	 							knockout_image_samples  			 					currentdict imageormask_sys  			 				}{  			 					currentdict ignoreimagedata  			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{										currentdict ignoreimagedata								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{							currentdict consumeimagedata  							currentoverprint not Name (All) eq or{								gsave 								knockout_unitsq								grestore		 					}if 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			AGMIMG_&image		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResource%ADOBeginClientInjection: DocumentProlog End "AI10"%ADOEndClientInjection: DocumentProlog End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetup%ADOBeginClientInjection: DocumentSetup Start "AI10"%ADOEndClientInjection: DocumentSetup Start "AI10"Adobe_AGM_Utils begin2 2010 true Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get exec%ADOBeginClientInjection: DocumentSetup End "AI10"%ADOEndClientInjection: DocumentSetup End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: laser05box.svg 1%%EndPageComments%%BeginPageSetup%ADOBeginClientInjection: PageSetup Start "AI10"%ADOEndClientInjection: PageSetup Start "AI10"Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%ADOBeginClientInjection: PageSetup End "AI10"%ADOEndClientInjection: PageSetup End "AI10"%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -654.886 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark800 path_rez% page clipgsavenewpathgsave % PSGState0 0 mo0 654.886 li491.142 654.886 li491.142 0 liclp[1 0 0 1 0 0 ] concat%ADOBeginClientInjection: BeginPageContent "AI10"%ADOEndClientInjection: BeginPageContent "AI10"gsave % PSGState0 0 mo491 0 li491 655 li0 655 li0 0 liclp0 lw1 lc1 lj4 ml[] 0 dshtrue sadj327.58 163.927 mo327.58 163.791 li327.443 163.791 lifalse sop0 0 0 1 cmyks163.745 327.489 mo163.745 327.626 li163.882 327.626 li0 0 0 1 cmyks216.82 640.83 mo213.306 637.362 li214.265 640.921 li212.302 642.017 li214.584 642.062 li215.542 645.576 li216.82 640.83 li0 0 0 1 cmyks258.624 12.7325 mo257.072 18.6653 li261.407 23.0464 li267.34 21.4493 li268.892 15.5164 li264.556 11.181 li258.624 12.7325 li0 0 0 1 cmyks202.49 12.824 mo186.152 12.824 li194.321 26.9712 li200.391 30.4854 li206.324 24.5069 li208.56 16.3379 li202.49 12.824 li0 0 0 1 cmyks215.588 9.26416 mo214.584 12.824 li212.394 12.824 li214.31 13.9649 li213.352 17.5245 li216.82 14.0562 li215.588 9.26416 li0 0 0 1 cmyks222.342 15.5164 mo223.894 21.4493 li229.827 23.0464 li234.208 18.6653 li232.61 12.7325 li226.678 11.181 li222.342 15.5164 li0 0 0 1 cmyks218.326 19.5325 mo210.796 27.0169 li208.058 37.3306 li218.326 34.5469 li225.811 27.0169 li219.878 25.4654 li218.326 19.5325 li0 0 0 1 cmyks220.836 38.9737 mo214.858 44.9522 li218.372 51.0215 li232.519 59.1905 li232.519 42.8526 li229.005 36.7833 li220.836 38.9737 li0 0 0 1 cmyks199.25 35.5054 mo200.391 37.4678 li197.79 40.0689 li202.536 38.7911 li203.814 33.9993 li201.212 36.6465 li199.25 35.5054 li0 0 0 1 cmyks205.32 47.5533 mo207.921 44.9522 li209.883 46.0928 li208.743 44.1763 li211.344 41.5293 li206.552 42.8072 li205.32 47.5533 li0 0 0 1 cmyks202.719 57.0914 mo200.528 65.2603 li206.46 68.7745 li222.936 68.7745 li214.767 54.627 li208.697 51.1133 li202.719 57.0914 li0 0 0 1 cmyks201.076 44.2676 mo190.807 47.0513 li183.277 54.5816 li189.21 56.1329 li190.807 62.066 li198.292 54.5816 li201.076 44.2676 li0 0 0 1 cmyks258.714 30.8047 mo255.109 29.8008 li259.901 28.523 li263.37 32.0369 li259.855 31.0787 li258.714 32.9954 li258.714 30.8047 li0 0 0 1 cmyks236.125 29.8008 mo232.519 30.8047 li232.519 32.9954 li231.424 31.0787 li227.819 32.0369 li231.333 28.523 li236.125 29.8008 li0 0 0 1 cmyks237.448 34.5469 mo237.448 41.5293 li245.617 55.6768 li253.786 41.5293 li253.786 34.5469 li245.617 32.3565 li237.448 34.5469 li0 0 0 1 cmyks242.788 60.6055 mo240.825 63.9825 li237.448 62.066 li237.448 51.4327 li242.788 60.6055 li0 0 0 1 cmyks258.714 59.1905 mo272.862 51.0215 li276.331 44.9522 li270.397 38.9737 li262.183 36.7833 li258.714 42.8526 li258.714 59.1905 li0 0 0 1 cmyks253.786 51.4327 mo248.492 60.6055 li250.409 63.9825 li253.786 62.066 li253.786 51.4327 li0 0 0 1 cmyks181.36 4.56373 mo183.323 7.89502 li193.911 7.89502 li184.737 2.60132 li181.36 4.56373 li0 0 0 1 cmyks176.569 12.824 mo180.448 12.824 li185.787 22.0425 li182.73 20.3084 179.626 18.483 176.569 16.7486 cv176.569 12.824 li0 0 0 1 cmyks176.569 22.4078 mo190.716 30.5767 li194.23 36.6006 li188.251 42.5792 li180.128 44.815 li176.569 38.4258 li176.569 22.4078 li0 0 0 1 cmyks171.64 30.2115 mo171.64 19.5782 li168.308 17.6158 li166.346 20.9927 li171.64 30.2115 li0 0 0 1 cmyks176.569 50.7935 mo173.009 51.7974 li177.801 53.0298 li181.27 49.607 li177.709 50.5655 li176.569 48.5572 li176.569 50.7935 li0 0 0 1 cmyks185.194 60.149 mo186.746 66.0821 li182.41 70.4175 li176.478 68.8204 li174.926 62.8873 li179.261 58.5518 li185.194 60.149 li0 0 0 1 cmyks193.545 72.334 mo194.504 68.7745 li196.74 68.7745 li194.823 67.6334 li195.782 64.0738 li192.313 67.542 li193.545 72.334 li0 0 0 1 cmyks183.871 75.8936 mo177.938 74.2964 li179.946 82.0088 li177.938 89.3565 li183.871 87.7593 li188.251 92.0948 li190.99 81.8267 li188.251 71.5582 li183.871 75.8936 li0 0 0 1 cmyks192.313 96.1563 mo195.782 99.625 li194.823 96.065 li196.74 94.9244 li194.504 94.9244 li193.545 91.3643 li192.313 96.1563 li0 0 0 1 cmyks176.478 94.8331 mo174.926 100.766 li179.261 105.147 li185.194 103.55 li186.746 97.6168 li182.41 93.2813 li176.478 94.8331 li0 0 0 1 cmyks189.21 107.612 mo183.277 109.163 li190.807 116.693 li201.076 119.432 li198.292 109.163 li190.807 101.679 li189.21 107.612 li0 0 0 1 cmyks177.801 110.624 mo173.009 111.901 li176.569 112.86 li176.569 115.096 li177.709 113.179 li181.27 114.092 li177.801 110.624 li0 0 0 1 cmyks180.083 118.884 mo176.569 124.954 li176.569 141.337 li190.716 133.168 li194.23 127.099 li188.251 121.075 li180.083 118.884 li0 0 0 1 cmyks166.346 142.752 mo168.308 146.129 li171.64 144.121 li171.64 133.533 li166.346 142.752 li0 0 0 1 cmyks176.569 150.602 mo180.63 150.693 li185.787 141.702 li176.569 146.996 li176.569 150.602 li0 0 0 1 cmyks258.714 68.7745 mo262.594 68.7745 li267.888 59.5557 li258.714 64.8956 li258.714 68.7745 li0 0 0 1 cmyks253.786 73.7032 mo259.719 73.7032 li256.752 78.8604 li261.681 82.0088 li256.752 84.8384 li259.719 89.9957 li253.786 89.9957 li253.786 95.9737 li248.584 93.0074 li245.617 98.1646 li242.605 93.0074 li237.22 96.1563 li237.174 89.9957 li231.47 89.9957 li234.345 85.1124 li229.051 82.0088 li234.481 78.8604 li231.47 73.7032 li237.448 73.7032 li237.448 67.6792 li242.605 70.691 li245.617 65.4883 li248.584 70.691 li253.786 67.6792 li253.786 73.7032 li0 0 0 1 cmyks263.506 77.0347 mo265.469 73.7032 li276.102 73.7032 li266.883 78.9971 li263.506 77.0347 li0 0 0 1 cmyks232.519 64.8956 mo223.3 59.5557 li228.594 68.7745 li232.519 68.7745 li232.519 64.8956 li0 0 0 1 cmyks240.825 99.7159 mo237.265 101.77 li237.311 112.541 li242.788 103.139 li240.825 99.7159 li0 0 0 1 cmyks232.245 94.9244 mo228.594 94.9244 li223.3 104.143 li232.291 98.9859 li232.245 94.9244 li0 0 0 1 cmyks265.469 89.9957 mo276.102 89.9957 li266.883 84.7017 li263.506 86.6182 li265.469 89.9957 li0 0 0 1 cmyks253.786 101.679 mo253.786 112.312 li248.492 103.139 li250.409 99.7159 li253.786 101.679 li0 0 0 1 cmyks258.714 94.9244 mo258.714 98.8492 li267.888 104.143 li262.594 94.9244 li258.714 94.9244 li0 0 0 1 cmyks227.728 77.0347 mo225.811 73.7032 li214.858 73.7032 li224.122 79.0884 li227.728 77.0347 li0 0 0 1 cmyks196.101 81.8267 mo198.246 73.7032 li205.183 73.7032 li219.239 81.9634 li205.32 89.9957 li198.246 89.9957 li196.146 82.0088 li196.101 81.8267 li0 0 0 1 cmyks202.719 106.653 mo208.697 112.586 li214.767 109.072 li222.936 94.9244 li206.598 94.9244 li200.528 98.4839 li202.719 106.653 li0 0 0 1 cmyks225.811 89.9957 mo215.131 89.9957 li224.122 84.8384 li227.636 86.8467 li225.811 89.9957 li0 0 0 1 cmyks214.858 118.747 mo220.836 124.726 li229.005 126.961 li232.428 120.983 li232.336 104.646 li218.372 112.723 li214.858 118.747 li0 0 0 1 cmyks205.32 116.146 mo206.552 120.892 li211.344 122.17 li208.743 119.568 li209.883 117.606 li207.921 118.747 li205.32 116.146 li0 0 0 1 cmyks197.79 123.676 mo200.391 126.277 li199.25 128.239 li201.212 127.099 li203.814 129.7 li202.536 124.954 li197.79 123.676 li0 0 0 1 cmyks194.321 136.773 mo186.244 150.693 li202.582 150.83 li208.56 147.407 li206.37 139.192 li200.391 133.259 li194.321 136.773 li0 0 0 1 cmyks223.894 142.295 mo222.342 148.183 li226.678 152.518 li232.61 150.966 li234.208 145.034 li229.827 140.698 li223.894 142.295 li0 0 0 1 cmyks213.306 146.175 mo214.31 149.78 li212.302 150.83 li214.584 150.921 li215.588 154.435 li216.82 149.688 li213.306 146.175 li0 0 0 1 cmyks225.811 136.682 mo218.326 129.152 li208.058 126.414 li210.796 136.682 li218.326 144.212 li219.878 138.279 li225.811 136.682 li0 0 0 1 cmyks253.786 122.215 mo245.617 108.068 li237.402 122.307 li237.448 129.198 li245.617 131.343 li253.786 129.198 li253.786 122.215 li0 0 0 1 cmyks262.183 126.87 mo270.397 124.726 li276.331 118.747 li272.862 112.723 li258.714 104.508 li258.714 120.846 li262.183 126.87 li0 0 0 1 cmyks236.125 133.944 mo232.565 132.94 li232.336 131.023 li231.424 132.666 li227.819 131.662 li231.333 135.176 li236.125 133.944 li0 0 0 1 cmyks238.087 149.46 mo245.617 147.498 li253.147 149.46 li251.55 143.528 li255.931 139.192 li245.617 136.454 li235.394 139.192 li239.684 143.528 li238.087 149.46 li0 0 0 1 cmyks263.37 131.662 mo259.855 132.666 li258.714 130.704 li258.714 132.94 li255.109 133.898 li259.901 135.176 li263.37 131.662 li0 0 0 1 cmyks261.407 140.698 mo257.072 145.034 li258.624 150.966 li264.556 152.518 li268.892 148.183 li267.34 142.295 li261.407 140.698 li0 0 0 1 cmyks309.873 4.56373 mo307.865 7.89502 li297.277 7.89502 li306.451 2.60132 li309.873 4.56373 li0 0 0 1 cmyks314.665 12.824 mo310.786 12.824 li305.446 22.0425 li314.665 16.7486 li314.665 12.824 li0 0 0 1 cmyks274.414 14.0562 mo277.882 17.5245 li276.923 13.9649 li278.886 12.824 li276.65 12.824 li275.691 9.26416 li274.414 14.0562 li0 0 0 1 cmyks282.674 16.3379 mo284.864 24.5069 li290.843 30.4854 li296.913 26.9712 li305.082 12.824 li288.789 12.824 li282.674 16.3379 li0 0 0 1 cmyks291.983 35.5054 mo290.022 36.6465 li287.42 33.9993 li288.698 38.7911 li293.444 40.0689 li290.843 37.4678 li291.983 35.5054 li0 0 0 1 cmyks297.003 36.6006 mo302.982 42.5792 li311.151 44.815 li314.665 38.7457 li314.665 22.4078 li300.518 30.5767 li297.003 36.6006 li0 0 0 1 cmyks272.908 19.5325 mo280.438 27.0169 li283.176 37.3306 li272.908 34.5469 li265.377 27.0169 li271.31 25.4654 li272.908 19.5325 li0 0 0 1 cmyks282.491 44.1763 mo281.351 46.0928 li283.312 44.9522 li285.914 47.5533 li284.682 42.8072 li279.89 41.5293 li282.491 44.1763 li0 0 0 1 cmyks276.467 54.627 mo268.298 68.7745 li284.636 68.7745 li290.706 65.2603 li288.47 57.0914 li282.537 51.1133 li276.467 54.627 li0 0 0 1 cmyks302.024 56.1329 mo307.957 54.5816 li300.426 47.0513 li290.158 44.2676 li293.079 55.2203 li300.426 62.066 li302.024 56.1329 li0 0 0 1 cmyks319.548 30.2115 mo324.888 20.9927 li322.925 17.6158 li319.548 19.5782 li319.548 30.2115 li0 0 0 1 cmyks314.665 48.6031 mo313.524 50.5655 li309.965 49.607 li313.479 53.0752 li318.179 51.7974 li314.665 50.8848 li314.665 48.6031 li0 0 0 1 cmyks306.04 60.149 mo304.442 66.0821 li308.778 70.4175 li314.665 68.8204 li316.171 62.7505 li311.973 58.5518 li306.04 60.149 li0 0 0 1 cmyks307.317 75.8936 mo302.982 71.5582 li300.29 82.0088 li302.982 92.0948 li307.317 87.7593 li313.479 89.4478 li311.562 81.8721 li313.342 74.2964 li307.317 75.8936 li0 0 0 1 cmyks311.973 105.147 mo316.308 100.766 li314.848 94.8785 li308.778 93.2813 li304.442 97.6168 li306.04 103.55 li311.973 105.147 li0 0 0 1 cmyks298.92 67.542 mo295.498 64.0738 li296.411 67.6334 li294.448 68.7745 li296.684 68.7745 li297.643 72.334 li298.92 67.542 li0 0 0 1 cmyks295.087 81.8267 mo292.942 89.9957 li285.914 89.9957 li271.767 81.8267 li285.64 73.8399 li285.686 73.8399 285.777 73.7945 285.868 73.7491 cv292.942 73.7032 li295.087 81.8267 li0 0 0 1 cmyks268.298 94.9244 mo276.467 109.072 li282.537 112.586 li288.47 106.653 li290.706 98.4839 li284.636 94.9244 li268.298 94.9244 li0 0 0 1 cmyks297.643 91.3643 mo296.684 94.9244 li294.813 94.9244 li296.411 96.065 li295.452 99.625 li298.92 96.1563 li297.643 91.3643 li0 0 0 1 cmyks302.024 107.612 mo307.957 109.163 li300.426 116.693 li290.158 119.432 li292.942 109.163 li300.426 101.679 li302.024 107.612 li0 0 0 1 cmyks291.983 128.239 mo290.843 126.277 li293.444 123.676 li288.698 124.954 li287.42 129.7 li290.022 127.099 li291.983 128.239 li0 0 0 1 cmyks297.003 127.099 mo300.518 133.168 li314.665 141.337 li314.665 124.954 li311.151 118.884 li302.982 121.075 li297.003 127.099 li0 0 0 1 cmyks282.491 119.568 mo279.89 122.17 li284.682 120.892 li285.914 116.146 li283.312 118.747 li281.351 117.606 li282.491 119.568 li0 0 0 1 cmyks272.908 129.152 mo265.377 136.682 li271.31 138.279 li272.908 144.212 li280.438 136.682 li283.176 126.414 li272.908 129.152 li0 0 0 1 cmyks282.674 147.407 mo288.606 150.83 li304.945 150.693 li296.913 136.773 li290.843 133.259 li284.864 139.192 li282.674 147.407 li0 0 0 1 cmyks277.882 146.175 mo274.414 149.688 li275.691 154.435 li276.604 150.921 li278.886 150.83 li276.923 149.78 li277.882 146.175 li0 0 0 1 cmyks318.179 111.901 mo313.479 110.624 li309.965 114.092 li313.524 113.179 li314.665 115.096 li314.665 112.86 li318.179 111.901 li0 0 0 1 cmyks322.925 146.129 mo324.888 142.752 li319.548 133.533 li319.548 144.121 li322.925 146.129 li0 0 0 1 cmyks314.665 146.996 mo305.446 141.702 li310.604 150.693 li314.665 150.602 li314.665 146.996 li0 0 0 1 cmyks390.422 174.88 mo386.086 179.215 li387.638 185.148 li393.571 186.746 li397.952 182.41 li396.354 176.478 li390.422 174.88 li0 0 0 1 cmyks395.168 194.823 mo391.563 195.782 li395.031 192.268 li399.823 193.545 li396.218 194.504 li396.218 196.74 li395.168 194.823 li0 0 0 1 cmyks383.577 189.165 mo382.025 183.231 li374.495 190.762 li371.756 201.03 li382.025 198.292 li389.509 190.762 li383.577 189.165 li0 0 0 1 cmyks401.831 177.938 mo409.361 179.946 li416.891 177.938 li415.294 183.871 li419.629 188.251 li409.361 190.99 li399.093 188.251 li403.428 183.871 li401.831 177.938 li0 0 0 1 cmyks401.146 198.246 mo401.146 205.274 li409.361 219.421 li417.53 205.274 li417.53 198.246 li409.361 196.056 li401.146 198.246 li0 0 0 1 cmyks379.287 172.963 mo378.328 176.523 li376.092 176.523 li378.054 177.664 li377.05 181.269 li380.564 177.755 li379.287 172.963 li0 0 0 1 cmyks347.067 171.64 mo357.655 171.64 li348.436 166.346 li345.059 168.263 li347.067 171.64 li0 0 0 1 cmyks370.068 188.251 mo372.304 180.037 li366.234 176.523 li349.851 176.523 li358.02 190.716 li364.135 194.185 li370.068 188.251 li0 0 0 1 cmyks349.531 185.742 mo346.428 184.007 343.371 182.228 340.267 180.448 cv340.267 176.523 li344.192 176.523 li349.531 185.742 li0 0 0 1 cmyks375.088 205.274 mo370.296 206.506 li369.019 211.298 li371.665 208.651 li373.582 209.838 li372.441 207.876 li375.088 205.274 li0 0 0 1 cmyks366.234 202.536 mo367.558 197.744 li364.911 200.345 li362.994 199.205 li364.135 201.212 li361.488 203.768 li366.234 202.536 li0 0 0 1 cmyks372.396 214.858 mo366.463 220.836 li364.227 229.005 li370.159 232.519 li386.634 232.519 li378.511 218.372 li372.396 214.858 li0 0 0 1 cmyks364.774 208.012 mo354.506 210.796 li347.022 218.326 li352.954 219.878 li354.506 225.811 li361.99 218.326 li364.774 208.012 li0 0 0 1 cmyks351.95 206.324 mo343.873 208.514 li340.267 202.171 li340.267 186.107 li354.415 194.321 li357.929 200.345 li351.95 206.324 li0 0 0 1 cmyks356.012 231.287 mo357.29 236.033 li358.248 232.474 li360.484 232.474 li358.522 231.333 li359.526 227.773 li356.012 231.287 li0 0 0 1 cmyks350.49 229.781 mo346.154 234.162 li340.222 232.565 li338.625 226.632 li342.96 222.296 li348.893 223.848 li350.49 229.781 li0 0 0 1 cmyks347.615 239.639 mo341.682 238.041 li343.645 245.708 li341.682 253.101 li347.615 251.504 li351.95 255.839 li354.688 245.571 li351.95 235.303 li347.615 239.639 li0 0 0 1 cmyks368.881 237.402 mo382.938 245.708 li369.019 253.74 li361.99 253.74 li359.845 245.708 li359.845 245.571 li361.99 237.402 li368.881 237.402 li0 0 0 1 cmyks392.704 200.528 mo384.535 202.673 li378.556 208.651 li382.07 214.721 li396.218 222.936 li396.218 206.552 li392.704 200.528 li0 0 0 1 cmyks396.218 232.519 mo396.218 228.594 li386.999 223.255 li392.339 232.519 li396.218 232.519 li0 0 0 1 cmyks389.509 237.402 mo378.556 237.402 li387.866 242.833 li391.472 240.779 li389.509 237.402 li0 0 0 1 cmyks414.153 227.727 mo417.53 225.765 li417.53 215.131 li412.191 224.305 li414.153 227.727 li0 0 0 1 cmyks401.146 225.765 mo401.146 215.131 li406.486 224.305 li404.569 227.727 li401.146 225.765 li0 0 0 1 cmyks401.146 231.424 mo406.349 234.39 li409.361 229.233 li412.328 234.39 li417.53 231.424 li417.53 237.402 li423.463 237.402 li420.497 242.559 li425.379 245.708 li420.497 248.538 li423.463 253.74 li417.53 253.74 li417.53 259.719 li412.328 256.707 li409.361 261.909 li406.349 256.707 li400.918 259.855 li400.918 253.74 li395.214 253.74 li398.043 248.812 li392.75 245.708 li398.18 242.559 li395.214 237.402 li401.146 237.402 li401.146 231.424 li0 0 0 1 cmyks307.774 155.622 mo297.049 155.712 li306.451 161.098 li309.873 159.181 li307.774 155.622 li0 0 0 1 cmyks309.873 168.263 mo307.865 171.64 li297.277 171.64 li306.451 166.346 li309.873 168.263 li0 0 0 1 cmyks310.786 176.523 mo305.446 185.742 li314.665 180.448 li314.665 176.523 li310.786 176.523 li0 0 0 1 cmyks319.548 183.323 mo319.548 193.911 li324.888 184.738 li322.925 181.315 li319.548 183.323 li0 0 0 1 cmyks330.045 184.738 mo335.384 193.911 li335.384 183.323 li332.007 181.315 li330.045 184.738 li0 0 0 1 cmyks275.691 172.963 mo274.414 177.755 li277.882 181.269 li276.923 177.664 li278.886 176.523 li276.65 176.523 li275.691 172.963 li0 0 0 1 cmyks280.438 190.762 mo283.176 201.03 li272.908 198.292 li265.377 190.762 li271.31 189.165 li272.908 183.231 li280.438 190.762 li0 0 0 1 cmyks284.864 188.251 mo290.843 194.185 li296.913 190.716 li305.082 176.523 li288.789 176.523 li282.674 180.037 li284.864 188.251 li0 0 0 1 cmyks302.982 206.324 mo311.151 208.514 li314.665 202.445 li314.665 186.107 li300.518 194.321 li297.003 200.345 li302.982 206.324 li0 0 0 1 cmyks290.843 201.212 mo291.983 199.205 li290.022 200.345 li287.42 197.744 li288.698 202.536 li293.444 203.768 li290.843 201.212 li0 0 0 1 cmyks290.158 208.012 mo293.079 218.965 li300.426 225.811 li302.024 219.878 li307.957 218.326 li300.426 210.796 li290.158 208.012 li0 0 0 1 cmyks281.351 209.838 mo283.312 208.651 li285.914 211.298 li284.682 206.506 li279.89 205.274 li282.491 207.876 li281.351 209.838 li0 0 0 1 cmyks270.397 202.673 mo262.183 200.528 li258.714 206.552 li258.714 222.936 li272.862 214.721 li276.331 208.651 li270.397 202.673 li0 0 0 1 cmyks276.467 218.372 mo268.298 232.474 li284.636 232.474 li290.706 229.005 li288.47 220.836 li282.537 214.858 li276.467 218.372 li0 0 0 1 cmyks285.868 237.494 mo292.942 237.402 li295.087 245.571 li292.942 253.74 li285.914 253.74 li271.767 245.571 li285.64 237.585 li285.686 237.539 285.777 237.494 285.868 237.494 cv0 0 0 1 cmyks298.92 231.287 mo295.498 227.773 li296.411 231.378 li294.448 232.474 li296.684 232.474 li297.643 236.033 li298.92 231.287 li0 0 0 1 cmyks341.545 216.774 mo345.014 213.306 li341.408 214.265 li340.267 212.256 li340.267 214.539 li336.753 215.497 li341.545 216.774 li0 0 0 1 cmyks313.479 216.82 mo318.179 215.542 li314.665 214.584 li314.665 212.348 li313.524 214.265 li309.965 213.352 li313.479 216.82 li0 0 0 1 cmyks316.171 226.449 mo311.973 222.296 li306.04 223.848 li304.442 229.781 li308.778 234.162 li314.665 232.565 li316.171 226.449 li0 0 0 1 cmyks307.317 239.639 mo302.982 235.303 li300.29 245.708 li302.982 255.839 li307.317 251.504 li313.479 253.147 li311.562 245.571 li313.342 237.996 li307.317 239.639 li0 0 0 1 cmyks338.625 264.51 mo342.96 268.846 li348.893 267.249 li350.49 261.316 li346.154 256.98 li340.222 258.578 li338.625 264.51 li0 0 0 1 cmyks314.848 258.578 mo308.778 256.98 li304.442 261.316 li306.04 267.249 li311.973 268.846 li316.308 264.51 li314.848 258.578 li0 0 0 1 cmyks318.179 275.646 mo313.479 274.322 li309.965 277.836 li313.524 276.878 li314.665 278.84 li314.665 276.559 li318.179 275.646 li0 0 0 1 cmyks311.151 282.628 mo302.982 284.819 li297.003 290.797 li300.518 296.867 li314.665 305.036 li314.665 288.698 li311.151 282.628 li0 0 0 1 cmyks340.267 276.559 mo340.267 278.84 li341.408 276.878 li345.014 277.836 li341.545 274.322 li336.753 275.646 li340.267 276.559 li0 0 0 1 cmyks294.813 258.669 mo296.411 259.81 li295.452 263.37 li298.92 259.901 li297.643 255.109 li296.684 258.669 li294.813 258.669 li0 0 0 1 cmyks268.298 258.669 mo276.467 272.816 li282.537 276.331 li288.47 270.352 li290.706 262.183 li284.636 258.669 li268.298 258.669 li0 0 0 1 cmyks276.331 282.491 mo272.862 276.421 li258.714 268.252 li258.714 284.545 li262.183 290.615 li270.397 288.424 li276.331 282.491 li0 0 0 1 cmyks283.312 282.491 mo281.351 281.35 li282.491 283.267 li279.89 285.914 li284.682 284.59 li285.914 279.844 li283.312 282.491 li0 0 0 1 cmyks288.698 288.652 mo287.42 293.398 li290.022 290.797 li291.983 291.938 li290.843 289.976 li293.444 287.375 li288.698 288.652 li0 0 0 1 cmyks292.942 272.862 mo300.426 265.377 li302.024 271.31 li307.957 272.862 li300.426 280.392 li290.158 283.176 li292.942 272.862 li0 0 0 1 cmyks290.843 296.958 mo284.864 302.937 li282.674 311.105 li288.606 314.528 li304.945 314.437 li296.913 300.472 li290.843 296.958 li0 0 0 1 cmyks283.176 290.158 mo272.908 292.896 li265.377 300.381 li271.31 301.978 li272.908 307.911 li280.438 300.381 li283.176 290.158 li0 0 0 1 cmyks275.691 318.133 mo276.604 314.62 li278.886 314.574 li276.923 313.479 li277.882 309.919 li274.414 313.387 li275.691 318.133 li0 0 0 1 cmyks332.007 309.828 mo335.384 307.865 li335.384 297.277 li330.045 306.451 li332.007 309.828 li0 0 0 1 cmyks322.925 309.828 mo324.888 306.451 li319.548 297.277 li319.548 307.865 li322.925 309.828 li0 0 0 1 cmyks305.446 305.401 mo310.604 314.391 li314.665 314.346 li314.665 310.74 li305.446 305.401 li0 0 0 1 cmyks307.774 319.32 mo297.049 319.411 li306.451 324.842 li309.873 322.88 li307.774 319.32 li0 0 0 1 cmyks309.828 332.007 mo307.865 335.384 li297.277 335.384 li306.451 330.044 li309.828 332.007 li0 0 0 1 cmyks340.267 314.346 mo344.329 314.391 li349.531 305.401 li340.267 310.74 li340.267 314.346 li0 0 0 1 cmyks340.267 305.036 mo354.415 296.867 li357.929 290.797 li351.95 284.819 li343.827 282.628 li340.267 288.698 li340.267 305.036 li0 0 0 1 cmyks400.964 265.515 mo401.055 276.285 li406.486 266.838 li404.569 263.461 li400.964 265.515 li0 0 0 1 cmyks414.153 263.461 mo417.53 265.377 li417.53 276.057 li412.191 266.838 li414.153 263.461 li0 0 0 1 cmyks389.509 253.74 mo378.876 253.74 li387.866 248.538 li391.334 250.591 li389.509 253.74 li0 0 0 1 cmyks392.339 258.669 mo386.999 267.888 li396.035 262.685 li395.99 258.669 li392.339 258.669 li0 0 0 1 cmyks382.07 276.421 mo378.556 282.491 li384.535 288.424 li392.704 290.66 li396.126 284.728 li396.035 268.344 li382.07 276.421 li0 0 0 1 cmyks401.146 286.005 mo401.146 292.942 li409.361 295.087 li417.53 292.942 li417.53 285.914 li409.361 271.767 li401.146 286.005 li0 0 0 1 cmyks364.227 262.183 mo366.463 270.352 li372.396 276.331 li378.511 272.816 li386.634 258.669 li370.342 258.669 li364.227 262.183 li0 0 0 1 cmyks359.526 263.37 mo358.522 259.81 li360.484 258.669 li358.248 258.669 li357.29 255.109 li356.012 259.901 li359.526 263.37 li0 0 0 1 cmyks347.022 272.862 mo354.506 280.392 li364.774 283.176 li361.99 272.862 li354.506 265.377 li352.954 271.31 li347.022 272.862 li0 0 0 1 cmyks361.488 287.375 mo364.135 289.976 li362.994 291.938 li364.911 290.797 li367.558 293.398 li366.234 288.652 li361.488 287.375 li0 0 0 1 cmyks375.088 285.914 mo372.441 283.267 li373.582 281.35 li371.665 282.491 li369.019 279.844 li370.296 284.59 li375.088 285.914 li0 0 0 1 cmyks374.495 300.381 mo382.025 307.911 li383.577 301.978 li389.509 300.381 li382.025 292.896 li371.756 290.158 li374.495 300.381 li0 0 0 1 cmyks370.114 302.937 mo364.135 296.958 li358.02 300.472 li349.988 314.437 li366.326 314.528 li372.304 311.105 li370.114 302.937 li0 0 0 1 cmyks345.059 322.88 mo348.436 324.842 li357.883 319.411 li347.159 319.32 li345.059 322.88 li0 0 0 1 cmyks378.328 314.62 mo379.287 318.133 li380.564 313.387 li377.05 309.919 li378.009 313.479 li376.046 314.574 li378.328 314.62 li0 0 0 1 cmyks403.428 307.272 mo401.831 313.159 li409.361 311.197 li416.891 313.159 li415.294 307.272 li419.629 302.937 li409.361 300.198 li399.093 302.937 li403.428 307.272 li0 0 0 1 cmyks396.081 294.768 mo395.168 296.365 li391.563 295.406 li395.031 298.92 li399.823 297.643 li396.263 296.684 li396.081 294.768 li0 0 0 1 cmyks386.086 311.927 mo390.422 316.262 li396.354 314.665 li397.952 308.732 li393.571 304.397 li387.638 305.994 li386.086 311.927 li0 0 0 1 cmyks258.624 176.478 mo257.072 182.41 li261.407 186.746 li267.34 185.148 li268.892 179.215 li264.556 174.88 li258.624 176.478 li0 0 0 1 cmyks238.087 177.938 mo245.617 179.946 li253.147 177.938 li251.55 183.871 li255.931 188.251 li245.617 190.99 li235.394 188.251 li239.684 183.871 li238.087 177.938 li0 0 0 1 cmyks232.519 194.504 mo232.519 196.74 li231.424 194.823 li227.819 195.782 li231.333 192.268 li236.125 193.545 li232.519 194.504 li0 0 0 1 cmyks237.448 198.246 mo237.448 205.274 li245.617 219.421 li253.786 205.274 li253.786 198.246 li245.617 196.056 li237.448 198.246 li0 0 0 1 cmyks258.714 194.504 mo255.109 193.545 li259.901 192.268 li263.37 195.782 li259.855 194.823 li258.714 196.74 li258.714 194.504 li0 0 0 1 cmyks232.61 176.478 mo226.678 174.88 li222.342 179.215 li223.894 185.148 li229.827 186.746 li234.208 182.41 li232.61 176.478 li0 0 0 1 cmyks214.584 176.523 mo212.394 176.523 li214.31 177.664 li213.352 181.269 li216.82 177.755 li215.588 172.963 li214.584 176.523 li0 0 0 1 cmyks200.391 194.185 mo206.324 188.251 li208.56 180.037 li202.49 176.523 li186.152 176.523 li194.321 190.716 li200.391 194.185 li0 0 0 1 cmyks225.811 190.762 mo219.878 189.165 li218.326 183.231 li210.796 190.762 li208.058 201.03 li218.326 198.292 li225.811 190.762 li0 0 0 1 cmyks214.858 208.651 mo218.372 214.721 li232.519 222.936 li232.519 206.552 li229.005 200.528 li220.836 202.673 li214.858 208.651 li0 0 0 1 cmyks209.883 209.838 mo208.743 207.876 li211.344 205.274 li206.552 206.506 li205.32 211.298 li207.921 208.651 li209.883 209.838 li0 0 0 1 cmyks197.79 203.768 mo202.536 202.536 li203.814 197.744 li201.212 200.345 li199.25 199.205 li200.391 201.212 li197.79 203.768 li0 0 0 1 cmyks202.719 220.836 mo200.528 229.005 li206.46 232.519 li222.936 232.519 li214.767 218.372 li208.697 214.858 li202.719 220.836 li0 0 0 1 cmyks201.076 208.012 mo190.807 210.796 li183.277 218.326 li189.21 219.878 li190.807 225.811 li198.292 218.326 li201.076 208.012 li0 0 0 1 cmyks194.823 231.333 mo195.782 227.773 li192.313 231.287 li193.545 236.033 li194.504 232.474 li196.74 232.474 li194.823 231.333 li0 0 0 1 cmyks205.183 237.402 mo219.239 245.708 li205.32 253.74 li198.246 253.74 li196.146 245.708 li196.101 245.571 li198.246 237.402 li205.183 237.402 li0 0 0 1 cmyks228.594 232.519 mo232.519 232.519 li232.519 228.594 li223.3 223.255 li228.594 232.519 li0 0 0 1 cmyks227.728 240.779 mo225.811 237.402 li214.858 237.402 li224.122 242.833 li227.728 240.779 li0 0 0 1 cmyks240.825 227.727 mo237.448 225.765 li237.448 215.131 li242.788 224.305 li240.825 227.727 li0 0 0 1 cmyks231.47 237.402 mo237.448 237.402 li237.448 231.424 li242.605 234.39 li245.617 229.233 li248.584 234.39 li253.786 231.424 li253.786 237.402 li259.719 237.402 li256.752 242.559 li261.681 245.708 li256.752 248.538 li259.719 253.74 li253.786 253.74 li253.786 259.719 li248.584 256.707 li245.617 261.909 li242.605 256.707 li237.22 259.855 li237.174 253.74 li231.47 253.74 li234.345 248.812 li229.051 245.708 li234.481 242.559 li231.47 237.402 li0 0 0 1 cmyks267.888 223.255 mo258.714 228.594 li258.714 232.519 li262.594 232.519 li267.888 223.255 li0 0 0 1 cmyks253.786 225.765 mo253.786 215.131 li248.492 224.305 li250.409 227.727 li253.786 225.765 li0 0 0 1 cmyks263.506 240.779 mo265.469 237.402 li276.102 237.402 li266.883 242.742 li263.506 240.779 li0 0 0 1 cmyks181.36 159.181 mo184.737 161.098 li194.185 155.712 li183.414 155.622 li181.36 159.181 li0 0 0 1 cmyks181.36 168.263 mo183.323 171.64 li193.911 171.64 li184.737 166.346 li181.36 168.263 li0 0 0 1 cmyks180.448 176.523 mo185.787 185.742 li182.73 184.007 179.626 182.228 176.569 180.448 cv176.569 176.523 li180.448 176.523 li0 0 0 1 cmyks166.346 184.738 mo171.64 193.911 li171.64 183.323 li168.308 181.315 li166.346 184.738 li0 0 0 1 cmyks159.227 181.315 mo155.85 183.323 li155.85 193.911 li161.144 184.738 li159.227 181.315 li0 0 0 1 cmyks190.716 194.321 mo194.23 200.345 li188.251 206.324 li180.128 208.514 li176.569 202.171 li176.569 186.107 li190.716 194.321 li0 0 0 1 cmyks144.167 171.64 mo133.533 171.64 li142.752 166.346 li146.129 168.263 li144.167 171.64 li0 0 0 1 cmyks147.042 176.523 mo141.748 185.742 li150.966 180.448 li150.966 176.523 li147.042 176.523 li0 0 0 1 cmyks127.144 194.185 mo133.214 190.716 li141.383 176.523 li125.045 176.523 li118.93 180.037 li121.12 188.251 li127.144 194.185 li0 0 0 1 cmyks136.819 194.321 mo133.305 200.345 li139.238 206.324 li147.453 208.514 li150.966 202.445 li150.966 186.107 li136.819 194.321 li0 0 0 1 cmyks150.921 214.584 mo150.921 212.348 li149.78 214.265 li146.22 213.352 li149.734 216.82 li154.48 215.542 li150.921 214.584 li0 0 0 1 cmyks120.938 206.506 mo116.191 205.274 li118.792 207.876 li117.652 209.838 li119.614 208.651 li122.215 211.298 li120.938 206.506 li0 0 0 1 cmyks129.334 218.965 mo136.728 225.811 li138.279 219.878 li144.212 218.326 li136.728 210.796 li126.459 208.012 li129.334 218.965 li0 0 0 1 cmyks129.746 203.768 mo127.144 201.212 li128.285 199.205 li126.323 200.345 li123.722 197.744 li124.999 202.536 li129.746 203.768 li0 0 0 1 cmyks132.986 232.474 mo133.944 236.033 li135.222 231.287 li131.753 227.773 li132.712 231.378 li130.75 232.474 li132.986 232.474 li0 0 0 1 cmyks126.962 229.005 mo124.771 220.836 li118.838 214.858 li112.769 218.372 li104.6 232.474 li120.892 232.474 li126.962 229.005 li0 0 0 1 cmyks129.198 237.402 mo131.388 245.571 li129.198 253.74 li122.215 253.74 li108.068 245.571 li121.896 237.585 li121.987 237.539 122.033 237.494 122.124 237.494 cv129.198 237.402 li0 0 0 1 cmyks152.427 226.449 mo148.274 222.296 li142.341 223.848 li140.744 229.781 li145.079 234.162 li150.966 232.565 li152.427 226.449 li0 0 0 1 cmyks139.238 235.303 mo136.545 245.708 li139.238 255.839 li143.573 251.504 li149.734 253.147 li147.817 245.571 li149.643 237.996 li143.573 239.639 li139.238 235.303 li0 0 0 1 cmyks176.569 212.256 mo176.569 214.539 li173.009 215.497 li177.801 216.774 li181.27 213.306 li177.709 214.265 li176.569 212.256 li0 0 0 1 cmyks186.746 229.781 mo182.41 234.162 li176.478 232.565 li174.926 226.632 li179.261 222.296 li185.194 223.848 li186.746 229.781 li0 0 0 1 cmyks177.938 238.041 mo179.946 245.708 li177.938 253.101 li183.871 251.504 li188.251 255.839 li190.99 245.571 li188.251 235.303 li183.871 239.639 li177.938 238.041 li0 0 0 1 cmyks176.478 258.578 mo174.926 264.51 li179.261 268.846 li185.194 267.249 li186.746 261.316 li182.41 256.98 li176.478 258.578 li0 0 0 1 cmyks192.313 259.901 mo195.782 263.37 li194.823 259.81 li196.74 258.669 li194.504 258.669 li193.545 255.109 li192.313 259.901 li0 0 0 1 cmyks181.27 277.836 mo177.801 274.322 li173.009 275.646 li176.569 276.559 li176.569 278.84 li177.709 276.878 li181.27 277.836 li0 0 0 1 cmyks176.569 288.698 mo176.569 305.036 li190.716 296.867 li194.23 290.797 li188.251 284.819 li180.083 282.628 li176.569 288.698 li0 0 0 1 cmyks190.807 280.392 mo201.076 283.176 li198.292 272.862 li190.807 265.377 li189.21 271.31 li183.277 272.862 li190.807 280.392 li0 0 0 1 cmyks140.744 261.316 mo142.341 267.249 li148.274 268.846 li152.609 264.51 li151.104 258.578 li145.079 256.98 li140.744 261.316 li0 0 0 1 cmyks120.892 258.669 mo104.6 258.669 li112.769 272.816 li118.838 276.331 li124.771 270.352 li126.962 262.183 li120.892 258.669 li0 0 0 1 cmyks135.222 259.901 mo133.944 255.109 li132.986 258.669 li131.114 258.669 li132.667 259.81 li131.708 263.37 li135.222 259.901 li0 0 0 1 cmyks122.215 279.844 mo119.614 282.491 li117.652 281.35 li118.792 283.267 li116.191 285.914 li120.938 284.59 li122.215 279.844 li0 0 0 1 cmyks126.459 283.176 mo129.198 272.862 li136.728 265.377 li138.279 271.31 li144.212 272.862 li136.728 280.392 li126.459 283.176 li0 0 0 1 cmyks124.999 288.652 mo123.722 293.398 li126.323 290.797 li128.285 291.938 li127.144 289.976 li129.746 287.375 li124.999 288.652 li0 0 0 1 cmyks154.48 275.646 mo149.734 274.322 li146.22 277.836 li149.78 276.878 li150.921 278.84 li150.921 276.559 li154.48 275.646 li0 0 0 1 cmyks139.238 284.819 mo133.305 290.797 li136.819 296.867 li150.966 305.036 li150.966 288.698 li147.453 282.628 li139.238 284.819 li0 0 0 1 cmyks141.748 305.401 mo146.905 314.391 li150.966 314.346 li150.966 310.74 li141.748 305.401 li0 0 0 1 cmyks155.85 307.865 mo159.227 309.828 li161.144 306.451 li155.85 297.277 li155.85 307.865 li0 0 0 1 cmyks121.12 302.937 mo118.93 311.105 li124.862 314.528 li141.246 314.437 li133.214 300.472 li127.144 296.958 li121.12 302.937 li0 0 0 1 cmyks144.03 319.32 mo133.305 319.411 li142.752 324.842 li146.129 322.88 li144.03 319.32 li0 0 0 1 cmyks176.569 310.74 mo176.569 314.346 li180.63 314.391 li185.787 305.401 li176.569 310.74 li0 0 0 1 cmyks168.308 309.828 mo171.64 307.865 li171.64 297.277 li166.346 306.451 li168.308 309.828 li0 0 0 1 cmyks181.36 322.88 mo184.737 324.842 li194.185 319.411 li183.414 319.32 li181.36 322.88 li0 0 0 1 cmyks181.36 332.007 mo183.277 335.384 li193.911 335.384 li184.737 330.044 li181.36 332.007 li0 0 0 1 cmyks263.506 250.363 mo265.469 253.74 li276.102 253.74 li266.883 248.446 li263.506 250.363 li0 0 0 1 cmyks258.714 262.594 mo267.888 267.888 li262.594 258.669 li258.714 258.669 li258.714 262.594 li0 0 0 1 cmyks253.786 265.377 mo253.786 276.057 li248.492 266.838 li250.409 263.461 li253.786 265.377 li0 0 0 1 cmyks232.245 258.669 mo228.594 258.669 li223.3 267.888 li232.291 262.685 li232.245 258.669 li0 0 0 1 cmyks240.825 263.461 mo237.265 265.515 li237.311 276.285 li242.788 266.838 li240.825 263.461 li0 0 0 1 cmyks232.336 268.344 mo218.372 276.421 li214.858 282.491 li220.836 288.424 li229.005 290.66 li232.428 284.728 li232.336 268.344 li0 0 0 1 cmyks237.402 286.005 mo237.448 292.942 li245.617 295.087 li253.786 292.942 li253.786 285.914 li245.617 271.767 li237.402 286.005 li0 0 0 1 cmyks227.636 250.591 mo225.811 253.74 li215.131 253.74 li224.122 248.538 li227.636 250.591 li0 0 0 1 cmyks200.528 262.183 mo202.719 270.352 li208.697 276.331 li214.767 272.816 li222.936 258.669 li206.598 258.669 li200.528 262.183 li0 0 0 1 cmyks197.79 287.375 mo200.391 289.976 li199.25 291.938 li201.212 290.797 li203.814 293.398 li202.536 288.652 li197.79 287.375 li0 0 0 1 cmyks211.344 285.914 mo208.743 283.267 li209.883 281.35 li207.921 282.491 li205.32 279.844 li206.552 284.59 li211.344 285.914 li0 0 0 1 cmyks219.878 301.978 mo225.811 300.381 li218.326 292.896 li208.058 290.158 li210.796 300.381 li218.326 307.911 li219.878 301.978 li0 0 0 1 cmyks223.894 305.994 mo222.342 311.927 li226.678 316.262 li232.61 314.665 li234.208 308.732 li229.827 304.397 li223.894 305.994 li0 0 0 1 cmyks194.321 300.472 mo186.244 314.437 li202.582 314.528 li208.56 311.105 li206.37 302.937 li200.391 296.958 li194.321 300.472 li0 0 0 1 cmyks216.82 313.387 mo213.306 309.919 li214.31 313.479 li212.302 314.574 li214.584 314.62 li215.588 318.133 li216.82 313.387 li0 0 0 1 cmyks263.37 295.406 mo259.855 296.365 li258.714 294.402 li258.714 296.639 li255.109 297.597 li259.901 298.92 li263.37 295.406 li0 0 0 1 cmyks255.931 302.937 mo245.617 300.198 li235.394 302.937 li239.684 307.272 li238.087 313.159 li245.617 311.197 li253.147 313.159 li251.55 307.272 li255.931 302.937 li0 0 0 1 cmyks261.407 304.397 mo257.072 308.732 li258.624 314.665 li264.556 316.262 li268.892 311.927 li267.34 305.994 li261.407 304.397 li0 0 0 1 cmyks231.424 296.365 mo227.819 295.406 li231.333 298.92 li236.125 297.643 li232.565 296.684 li232.336 294.768 li231.424 296.365 li0 0 0 1 cmyks257.026 346.109 mo261.362 350.49 li267.294 348.893 li268.892 342.96 li264.51 338.625 li258.578 340.176 li257.026 346.109 li0 0 0 1 cmyks255.885 351.95 mo245.571 354.688 li235.349 351.95 li239.639 347.569 li238.041 341.636 li245.571 343.645 li253.102 341.636 li251.504 347.569 li255.885 351.95 li0 0 0 1 cmyks259.901 355.966 mo263.37 359.48 li259.81 358.522 li258.669 360.484 li258.669 358.248 li255.109 357.29 li259.901 355.966 li0 0 0 1 cmyks232.565 340.176 mo226.632 338.625 li222.296 342.96 li223.894 348.893 li229.827 350.49 li234.162 346.109 li232.565 340.176 li0 0 0 1 cmyks236.079 357.29 mo232.474 358.248 li232.474 360.484 li231.424 358.522 li227.819 359.48 li231.333 355.966 li236.079 357.29 li0 0 0 1 cmyks237.402 368.973 mo245.571 383.12 li253.74 368.973 li253.74 361.945 li245.571 359.8 li237.402 361.945 li237.402 368.973 li0 0 0 1 cmyks258.669 370.296 mo258.669 386.634 li272.816 378.465 li276.331 372.396 li270.352 366.417 li262.183 364.227 li258.669 370.296 li0 0 0 1 cmyks216.82 341.5 mo215.542 336.708 li214.584 340.267 li212.348 340.267 li214.31 341.408 li213.306 344.968 li216.82 341.5 li0 0 0 1 cmyks218.326 346.976 mo210.796 354.506 li208.012 364.729 li218.326 361.99 li225.811 354.506 li219.878 352.909 li218.326 346.976 li0 0 0 1 cmyks208.514 343.781 mo202.445 340.267 li186.152 340.267 li194.321 354.415 li200.391 357.883 li206.324 351.95 li208.514 343.781 li0 0 0 1 cmyks197.79 367.512 mo202.536 366.234 li203.814 361.443 li201.212 364.089 li199.25 362.949 li200.391 364.911 li197.79 367.512 li0 0 0 1 cmyks206.552 370.25 mo205.274 375.042 li207.921 372.396 li209.838 373.536 li208.697 371.574 li211.344 368.973 li206.552 370.25 li0 0 0 1 cmyks218.326 378.465 mo232.474 386.634 li232.474 370.296 li229.005 364.227 li220.836 366.417 li214.858 372.396 li218.326 378.465 li0 0 0 1 cmyks214.858 401.146 mo224.122 406.577 li227.682 404.523 li225.765 401.146 li214.858 401.146 li0 0 0 1 cmyks214.767 382.07 mo208.651 378.556 li202.673 384.535 li200.528 392.704 li206.46 396.218 li222.89 396.218 li214.767 382.07 li0 0 0 1 cmyks228.594 396.218 mo232.474 396.218 li232.474 392.293 li223.255 386.999 li228.594 396.218 li0 0 0 1 cmyks195.736 391.517 mo192.268 394.985 li193.545 399.777 li194.504 396.172 li196.74 396.172 li194.823 395.031 li195.736 391.517 li0 0 0 1 cmyks205.137 401.146 mo219.239 409.407 li205.274 417.484 li198.246 417.484 li196.101 409.407 li196.056 409.315 li198.246 401.146 li205.137 401.146 li0 0 0 1 cmyks196.74 422.413 mo194.504 422.413 li193.545 418.808 li192.268 423.6 li195.736 427.114 li194.823 423.554 li196.74 422.413 li0 0 0 1 cmyks225.765 417.484 mo215.131 417.484 li224.122 412.282 li227.59 414.335 li225.765 417.484 li0 0 0 1 cmyks206.552 422.413 mo200.528 425.882 li202.673 434.051 li208.651 440.029 li214.767 436.561 li222.89 422.413 li206.552 422.413 li0 0 0 1 cmyks253.74 401.146 mo259.719 401.146 li256.752 406.303 li261.681 409.407 li256.752 412.282 li259.719 417.484 li253.74 417.484 li253.74 423.463 li248.538 420.451 li245.571 425.608 li242.605 420.451 li237.174 423.554 li237.128 417.484 li231.424 417.484 li234.299 412.556 li229.005 409.407 li234.436 406.303 li231.424 401.146 li237.402 401.146 li237.402 395.168 li242.605 398.134 li245.571 392.932 li248.538 398.134 li253.74 395.168 li253.74 401.146 li0 0 0 1 cmyks258.669 396.218 mo262.594 396.218 li267.888 386.999 li258.669 392.293 li258.669 396.218 li0 0 0 1 cmyks253.74 389.509 mo253.74 378.83 li248.446 388.049 li250.363 391.426 li253.74 389.509 li0 0 0 1 cmyks240.779 391.426 mo237.402 389.509 li237.402 378.83 li242.742 388.049 li240.779 391.426 li0 0 0 1 cmyks263.506 404.523 mo265.423 401.146 li276.057 401.146 li266.883 406.44 li263.506 404.523 li0 0 0 1 cmyks265.423 417.484 mo276.057 417.484 li266.883 412.145 li263.506 414.107 li265.423 417.484 li0 0 0 1 cmyks258.669 422.413 mo258.669 426.292 li267.888 431.632 li262.594 422.413 li258.669 422.413 li0 0 0 1 cmyks228.594 422.413 mo223.255 431.632 li232.245 426.429 li232.245 422.413 li228.594 422.413 li0 0 0 1 cmyks201.03 371.711 mo190.762 374.495 li183.277 382.025 li189.21 383.577 li190.762 389.509 li198.246 382.025 li201.03 371.711 li0 0 0 1 cmyks180.448 340.267 mo185.787 349.486 li182.73 347.751 179.626 345.926 176.569 344.146 cv176.569 340.267 li180.448 340.267 li0 0 0 1 cmyks168.263 345.059 mo166.3 348.436 li171.64 357.609 li171.64 347.022 li168.263 345.059 li0 0 0 1 cmyks176.569 378.283 mo173.009 379.241 li177.801 380.519 li181.224 377.005 li177.664 377.963 li176.569 376 li176.569 378.283 li0 0 0 1 cmyks176.569 365.87 mo176.569 349.851 li190.716 358.02 li194.185 364.089 li188.206 370.068 li180.083 372.213 li176.569 365.87 li0 0 0 1 cmyks176.432 396.309 mo174.88 390.376 li179.216 386.041 li185.148 387.592 li186.746 393.525 li182.365 397.906 li176.432 396.309 li0 0 0 1 cmyks183.871 415.248 mo188.206 419.584 li190.944 409.315 li188.206 399.047 li183.871 403.383 li177.938 401.785 li179.9 409.407 li177.938 416.846 li183.871 415.248 li0 0 0 1 cmyks176.432 422.322 mo174.88 428.254 li179.216 432.59 li185.148 430.993 li186.746 425.06 li182.365 420.725 li176.432 422.322 li0 0 0 1 cmyks189.21 435.009 mo183.277 436.561 li190.762 444.091 li201.03 446.875 li198.246 436.561 li190.762 429.076 li189.21 435.009 li0 0 0 1 cmyks177.801 438.066 mo173.009 439.344 li176.569 440.303 li176.569 442.539 li177.709 440.577 li181.224 441.581 li177.801 438.066 li0 0 0 1 cmyks166.3 470.149 mo168.263 473.526 li171.64 471.609 li171.64 460.976 li166.3 470.149 li0 0 0 1 cmyks190.716 460.565 mo194.185 454.496 li188.206 448.563 li180.083 446.373 li176.569 452.442 li176.569 468.734 li190.716 460.565 li0 0 0 1 cmyks180.585 478.09 mo185.787 469.1 li176.569 474.439 li176.569 478.09 li180.585 478.09 li0 0 0 1 cmyks181.36 486.624 mo184.737 488.586 li194.139 483.11 li183.414 483.019 li181.36 486.624 li0 0 0 1 cmyks168.263 508.803 mo166.3 512.135 li171.64 521.354 li171.64 510.72 li168.263 508.803 li0 0 0 1 cmyks181.36 495.706 mo183.277 499.083 li193.911 499.083 li184.737 493.743 li181.36 495.706 li0 0 0 1 cmyks180.448 504.011 mo185.787 513.23 li182.73 511.45 179.626 509.67 176.569 507.891 cv176.569 504.011 li180.448 504.011 li0 0 0 1 cmyks253.74 429.122 mo253.74 439.755 li248.446 430.537 li250.363 427.205 li253.74 429.122 li0 0 0 1 cmyks240.779 427.205 mo237.265 429.259 li237.311 439.983 li242.742 430.537 li240.779 427.205 li0 0 0 1 cmyks237.402 456.641 mo245.571 458.831 li253.74 456.641 li253.74 449.613 li245.571 435.465 li237.357 449.704 li237.402 456.641 li0 0 0 1 cmyks236.079 461.341 mo232.519 460.428 li232.336 458.466 li231.424 460.064 li227.819 459.151 li231.333 462.665 li236.079 461.341 li0 0 0 1 cmyks235.349 466.681 mo239.639 471.016 li238.041 476.903 li245.571 474.896 li253.102 476.903 li251.504 471.016 li255.885 466.681 li245.571 463.897 li235.349 466.681 li0 0 0 1 cmyks255.109 461.341 mo259.901 462.619 li263.37 459.151 li259.81 460.064 li258.669 458.146 li258.669 460.383 li255.109 461.341 li0 0 0 1 cmyks261.362 468.141 mo257.026 472.477 li258.578 478.364 li264.51 480.006 li268.892 475.626 li267.294 469.693 li261.362 468.141 li0 0 0 1 cmyks262.183 454.359 mo270.352 452.168 li276.331 446.19 li272.816 440.12 li258.669 431.997 li258.669 448.289 li262.183 454.359 li0 0 0 1 cmyks232.291 432.088 mo218.326 440.12 li214.858 446.235 li220.836 452.168 li229.005 454.359 li232.382 448.426 li232.291 432.088 li0 0 0 1 cmyks209.838 445.049 mo207.921 446.19 li205.274 443.543 li206.552 448.335 li211.344 449.613 li208.697 446.966 li209.838 445.049 li0 0 0 1 cmyks197.79 451.073 mo200.391 453.674 li199.25 455.637 li201.212 454.496 li203.814 457.097 li202.536 452.351 li197.79 451.073 li0 0 0 1 cmyks194.321 464.171 mo186.244 478.136 li202.582 478.227 li208.514 474.804 li206.324 466.681 li200.391 460.657 li194.321 464.171 li0 0 0 1 cmyks210.796 464.125 mo218.326 471.609 li219.878 465.677 li225.811 464.125 li218.326 456.641 li208.012 453.857 li210.796 464.125 li0 0 0 1 cmyks223.894 469.693 mo222.296 475.626 li226.632 480.006 li232.565 478.364 li234.162 472.477 li229.827 468.141 li223.894 469.693 li0 0 0 1 cmyks213.306 473.663 mo214.265 477.177 li212.302 478.318 li214.584 478.318 li215.542 481.877 li216.82 477.086 li213.306 473.663 li0 0 0 1 cmyks202.445 504.011 mo186.152 504.011 li194.321 518.159 li200.391 521.627 li206.324 515.649 li208.514 507.525 li202.445 504.011 li0 0 0 1 cmyks214.584 504.011 mo212.348 504.011 li214.31 505.152 li213.306 508.666 li216.82 505.244 li215.542 500.452 li214.584 504.011 li0 0 0 1 cmyks229.827 514.188 mo234.162 509.808 li232.565 503.875 li226.632 502.369 li222.296 506.659 li223.894 512.591 li229.827 514.188 li0 0 0 1 cmyks238.041 505.38 mo245.571 507.389 li253.102 505.38 li251.504 511.314 li255.885 515.649 li245.571 518.387 li235.349 515.649 li239.639 511.314 li238.041 505.38 li0 0 0 1 cmyks267.294 512.591 mo268.892 506.659 li264.51 502.369 li258.578 503.875 li257.026 509.808 li261.362 514.188 li267.294 512.591 li0 0 0 1 cmyks314.665 340.267 mo310.74 340.267 li305.401 349.486 li314.665 344.146 li314.665 340.267 li0 0 0 1 cmyks319.548 347.022 mo319.548 357.609 li324.888 348.436 li322.925 345.059 li319.548 347.022 li0 0 0 1 cmyks309.919 377.05 mo313.433 380.564 li318.179 379.241 li314.62 378.328 li314.62 376.046 li313.524 378.009 li309.919 377.05 li0 0 0 1 cmyks314.665 366.189 mo314.665 349.851 li300.518 358.02 li297.003 364.089 li302.982 370.068 li311.151 372.213 li314.665 366.189 li0 0 0 1 cmyks274.368 341.5 mo277.882 344.968 li276.923 341.408 li278.84 340.267 li276.604 340.267 li275.646 336.708 li274.368 341.5 li0 0 0 1 cmyks272.862 346.976 mo280.392 354.506 li283.176 364.729 li272.862 361.99 li265.377 354.506 li271.31 352.909 li272.862 346.976 li0 0 0 1 cmyks284.819 351.95 mo290.797 357.883 li296.867 354.415 li305.082 340.267 li288.744 340.267 li282.674 343.781 li284.819 351.95 li0 0 0 1 cmyks284.636 370.25 mo279.844 368.973 li282.491 371.574 li281.351 373.536 li283.312 372.396 li285.914 375.042 li284.636 370.25 li0 0 0 1 cmyks290.797 364.911 mo291.983 362.949 li290.022 364.089 li287.42 361.443 li288.652 366.234 li293.444 367.512 li290.797 364.911 li0 0 0 1 cmyks290.158 371.711 mo293.033 382.664 li300.381 389.509 li301.978 383.577 li307.911 382.025 li300.381 374.495 li290.158 371.711 li0 0 0 1 cmyks298.92 394.985 mo295.452 391.517 li296.411 395.077 li294.448 396.172 li296.684 396.172 li297.643 399.777 li298.92 394.985 li0 0 0 1 cmyks288.47 384.535 mo282.491 378.556 li276.467 382.07 li268.298 396.172 li284.591 396.172 li290.706 392.704 li288.47 384.535 li0 0 0 1 cmyks285.823 401.192 mo292.942 401.146 li295.087 409.315 li292.942 417.484 li285.914 417.484 li271.767 409.315 li285.64 401.329 li285.686 401.238 285.731 401.192 285.823 401.192 cv0 0 0 1 cmyks268.298 422.413 mo276.467 436.561 li282.491 440.029 li288.47 434.051 li290.706 425.882 li284.591 422.413 li268.298 422.413 li0 0 0 1 cmyks297.643 418.808 mo296.684 422.413 li294.813 422.413 li296.365 423.554 li295.406 427.114 li298.92 423.6 li297.643 418.808 li0 0 0 1 cmyks302.982 419.584 mo307.317 415.248 li313.479 416.891 li311.516 409.315 li313.342 401.74 li307.317 403.383 li302.982 399.047 li300.244 409.407 li302.982 419.584 li0 0 0 1 cmyks305.994 387.592 mo304.442 393.525 li308.778 397.906 li314.665 396.309 li316.126 390.194 li311.927 386.041 li305.994 387.592 li0 0 0 1 cmyks308.778 420.725 mo304.442 425.06 li305.994 430.993 li311.927 432.59 li316.308 428.254 li314.848 422.322 li308.778 420.725 li0 0 0 1 cmyks309.919 441.581 mo313.524 440.577 li314.62 442.539 li314.62 440.303 li318.179 439.344 li313.433 438.066 li309.919 441.581 li0 0 0 1 cmyks314.665 452.442 mo311.151 446.373 li302.982 448.563 li297.003 454.496 li300.518 460.565 li314.665 468.734 li314.665 452.442 li0 0 0 1 cmyks319.548 460.976 mo319.548 471.609 li322.925 473.526 li324.888 470.149 li319.548 460.976 li0 0 0 1 cmyks301.978 435.009 mo307.911 436.561 li300.381 444.091 li290.158 446.875 li292.896 436.561 li300.381 429.076 li301.978 435.009 li0 0 0 1 cmyks282.491 446.966 mo279.844 449.613 li284.636 448.335 li285.914 443.543 li283.312 446.19 li281.351 445.049 li282.491 446.966 li0 0 0 1 cmyks283.176 453.857 mo272.862 456.641 li265.377 464.125 li271.31 465.677 li272.862 471.609 li280.392 464.125 li283.176 453.857 li0 0 0 1 cmyks287.42 457.097 mo290.022 454.496 li291.983 455.637 li290.797 453.674 li293.444 451.073 li288.652 452.351 li287.42 457.097 li0 0 0 1 cmyks290.797 460.657 mo284.819 466.681 li282.674 474.804 li288.606 478.227 li304.945 478.136 li296.867 464.171 li290.797 460.657 li0 0 0 1 cmyks278.84 478.318 mo276.923 477.177 li277.882 473.663 li274.368 477.086 li275.646 481.877 li276.559 478.318 li278.84 478.318 li0 0 0 1 cmyks275.646 500.452 mo274.368 505.244 li277.882 508.666 li276.923 505.152 li278.84 504.011 li276.604 504.011 li275.646 500.452 li0 0 0 1 cmyks282.674 507.525 mo284.819 515.649 li290.797 521.627 li296.867 518.159 li305.082 504.011 li288.744 504.011 li282.674 507.525 li0 0 0 1 cmyks314.665 474.439 mo305.401 469.1 li310.604 478.09 li314.665 478.09 li314.665 474.439 li0 0 0 1 cmyks307.774 483.019 mo297.003 483.11 li306.451 488.586 li309.873 486.624 li307.774 483.019 li0 0 0 1 cmyks309.828 495.706 mo307.865 499.083 li297.277 499.083 li306.451 493.743 li309.828 495.706 li0 0 0 1 cmyks319.548 510.72 mo319.548 521.354 li324.888 512.135 li322.925 508.803 li319.548 510.72 li0 0 0 1 cmyks305.401 513.23 mo314.665 507.891 li314.665 504.011 li310.74 504.011 li305.401 513.23 li0 0 0 1 cmyks471.609 171.64 mo460.976 171.64 li470.195 166.346 li473.572 168.263 li471.609 171.64 li0 0 0 1 cmyks474.485 176.523 mo469.145 185.742 li478.364 180.448 li478.364 176.523 li474.485 176.523 li0 0 0 1 cmyks460.657 190.716 mo468.78 176.523 li452.488 176.523 li446.373 180.037 li448.609 188.251 li454.542 194.185 li460.657 190.716 li0 0 0 1 cmyks486.669 181.315 mo483.292 183.323 li483.292 193.911 li488.632 184.738 li486.669 181.315 li0 0 0 1 cmyks464.216 194.321 mo460.702 200.345 li466.681 206.324 li474.85 208.514 li478.364 202.445 li478.364 186.107 li464.216 194.321 li0 0 0 1 cmyks439.436 172.963 mo438.112 177.755 li441.581 181.269 li440.622 177.664 li442.63 176.523 li440.394 176.523 li439.436 172.963 li0 0 0 1 cmyks422.368 176.478 mo420.771 182.41 li425.106 186.746 li431.039 185.148 li432.636 179.215 li428.3 174.88 li422.368 176.478 li0 0 0 1 cmyks423.6 192.268 mo427.114 195.782 li423.554 194.823 li422.413 196.74 li422.413 194.504 li418.854 193.545 li423.6 192.268 li0 0 0 1 cmyks444.136 190.762 mo446.875 201.03 li436.606 198.292 li429.122 190.762 li435.055 189.165 li436.606 183.231 li444.136 190.762 li0 0 0 1 cmyks446.235 207.876 mo445.095 209.838 li447.011 208.651 li449.658 211.298 li448.38 206.506 li443.588 205.274 li446.235 207.876 li0 0 0 1 cmyks446.281 214.858 mo440.166 218.372 li431.997 232.474 li448.38 232.474 li454.45 229.005 li452.214 220.836 li446.281 214.858 li0 0 0 1 cmyks440.029 208.651 mo434.096 202.673 li425.927 200.528 li422.413 206.552 li422.413 222.936 li436.561 214.721 li440.029 208.651 li0 0 0 1 cmyks431.632 223.255 mo422.413 228.594 li422.413 232.519 li426.292 232.519 li431.632 223.255 li0 0 0 1 cmyks429.213 237.402 mo439.801 237.402 li430.582 242.742 li427.205 240.779 li429.213 237.402 li0 0 0 1 cmyks449.567 237.494 mo456.641 237.402 li458.831 245.571 li456.641 253.74 li449.658 253.74 li435.511 245.571 li449.339 237.585 li449.43 237.539 449.522 237.494 449.567 237.494 cv0 0 0 1 cmyks477.177 216.82 mo481.923 215.542 li478.364 214.584 li478.364 212.348 li477.269 214.265 li473.709 213.352 li477.177 216.82 li0 0 0 1 cmyks454.542 201.212 mo455.682 199.205 li453.766 200.345 li451.119 197.744 li452.442 202.536 li457.188 203.768 li454.542 201.212 li0 0 0 1 cmyks453.857 208.012 mo456.823 218.965 li464.125 225.811 li465.722 219.878 li471.655 218.326 li464.125 210.796 li453.857 208.012 li0 0 0 1 cmyks468.187 229.781 mo472.522 234.162 li478.409 232.565 li479.87 226.449 li475.671 222.296 li469.738 223.848 li468.187 229.781 li0 0 0 1 cmyks460.155 231.378 mo458.192 232.474 li460.429 232.474 li461.387 236.033 li462.665 231.287 li459.196 227.773 li460.155 231.378 li0 0 0 1 cmyks466.681 235.303 mo463.988 245.708 li466.681 255.839 li471.062 251.504 li477.223 253.147 li475.306 245.571 li477.086 237.996 li471.062 239.639 li466.681 235.303 li0 0 0 1 cmyks478.592 258.578 mo472.522 256.98 li468.187 261.316 li469.738 267.249 li475.671 268.846 li480.052 264.51 li478.592 258.578 li0 0 0 1 cmyks458.557 258.669 mo460.109 259.81 li459.151 263.37 li462.665 259.901 li461.387 255.109 li460.429 258.669 li458.557 258.669 li0 0 0 1 cmyks456.641 272.862 mo464.125 265.377 li465.722 271.31 li471.655 272.862 li464.125 280.392 li453.857 283.176 li456.641 272.862 li0 0 0 1 cmyks477.269 276.878 mo478.364 278.84 li478.364 276.559 li481.923 275.646 li477.177 274.322 li473.709 277.836 li477.269 276.878 li0 0 0 1 cmyks474.85 282.628 mo466.681 284.819 li460.702 290.797 li464.216 296.867 li478.364 305.036 li478.364 288.698 li474.85 282.628 li0 0 0 1 cmyks429.213 253.74 mo439.801 253.74 li430.582 248.446 li427.205 250.363 li429.213 253.74 li0 0 0 1 cmyks422.413 262.594 mo431.632 267.888 li426.292 258.669 li422.413 258.669 li422.413 262.594 li0 0 0 1 cmyks422.413 284.545 mo425.927 290.615 li434.096 288.424 li440.029 282.491 li436.561 276.421 li422.413 268.252 li422.413 284.545 li0 0 0 1 cmyks452.214 270.352 mo454.45 262.183 li448.38 258.669 li431.997 258.669 li440.166 272.816 li446.281 276.331 li452.214 270.352 li0 0 0 1 cmyks449.658 279.844 mo447.011 282.491 li445.095 281.35 li446.235 283.267 li443.588 285.914 li448.38 284.59 li449.658 279.844 li0 0 0 1 cmyks446.875 290.158 mo436.606 292.896 li429.122 300.381 li435.055 301.978 li436.606 307.911 li444.136 300.381 li446.875 290.158 li0 0 0 1 cmyks446.373 311.105 mo452.305 314.528 li468.689 314.437 li460.657 300.472 li454.542 296.958 li448.609 302.937 li446.373 311.105 li0 0 0 1 cmyks422.413 294.402 mo422.413 296.639 li418.854 297.597 li423.6 298.92 li427.114 295.406 li423.554 296.365 li422.413 294.402 li0 0 0 1 cmyks431.039 305.994 mo425.106 304.397 li420.771 308.732 li422.368 314.665 li428.3 316.262 li432.636 311.927 li431.039 305.994 li0 0 0 1 cmyks439.436 318.133 mo440.348 314.62 li442.63 314.574 li440.622 313.479 li441.581 309.919 li438.112 313.387 li439.436 318.133 li0 0 0 1 cmyks488.632 306.451 mo483.292 297.277 li483.292 307.865 li486.669 309.828 li488.632 306.451 li0 0 0 1 cmyks454.542 289.976 mo457.188 287.375 li452.442 288.652 li451.119 293.398 li453.766 290.797 li455.682 291.938 li454.542 289.976 li0 0 0 1 cmyks470.195 324.842 mo473.618 322.88 li471.519 319.32 li460.748 319.411 li470.195 324.842 li0 0 0 1 cmyks478.364 314.346 mo478.364 310.74 li469.145 305.401 li474.348 314.391 li478.364 314.346 li0 0 0 1 cmyks112.905 176.523 mo111.947 172.963 li110.715 177.755 li114.184 181.269 li113.225 177.664 li115.142 176.523 li112.905 176.523 li0 0 0 1 cmyks94.8785 176.478 mo93.3726 182.41 li97.6626 186.746 li103.596 185.148 li105.193 179.215 li100.812 174.88 li94.8785 176.478 li0 0 0 1 cmyks87.8047 183.871 mo92.1861 188.251 li81.8721 190.99 li71.6495 188.251 li75.939 183.871 li74.3423 177.938 li81.8721 179.946 li89.4024 177.938 li87.8047 183.871 li0 0 0 1 cmyks94.9698 196.74 mo94.9698 194.504 li91.3648 193.545 li96.2022 192.268 li99.6705 195.782 li96.1109 194.823 li94.9698 196.74 li0 0 0 1 cmyks101.679 190.762 mo107.612 189.165 li109.164 183.231 li116.693 190.762 li119.477 201.03 li109.164 198.292 li101.679 190.762 li0 0 0 1 cmyks48.649 176.523 mo50.5655 177.664 li49.6529 181.269 li53.1211 177.755 li51.8433 172.963 li50.8848 176.523 li48.649 176.523 li0 0 0 1 cmyks60.1949 185.148 mo66.1275 186.746 li70.4629 182.41 li68.8658 176.478 li62.9332 174.88 li58.5972 179.215 li60.1949 185.148 li0 0 0 1 cmyks56.1334 189.165 mo54.6275 183.231 li47.0972 190.762 li44.313 201.03 li54.6275 198.292 li62.1119 190.762 li56.1334 189.165 li0 0 0 1 cmyks72.3794 193.545 mo68.8199 194.504 li68.8199 196.74 li67.6792 194.823 li64.1197 195.782 li67.6334 192.268 li72.3794 193.545 li0 0 0 1 cmyks73.7486 198.246 mo73.7486 205.274 li81.8721 219.421 li90.0411 205.274 li90.0411 198.246 li81.8721 196.056 li73.7486 198.246 li0 0 0 1 cmyks65.3062 200.528 mo57.1373 202.673 li51.1128 208.651 li54.6724 214.721 li68.8199 222.936 li68.8199 206.552 li65.3062 200.528 li0 0 0 1 cmyks62.066 237.402 mo51.1128 237.402 li60.3775 242.833 li63.983 240.779 li62.066 237.402 li0 0 0 1 cmyks77.0806 227.727 mo73.7486 225.765 li73.7486 215.131 li79.0425 224.305 li77.0806 227.727 li0 0 0 1 cmyks68.8199 232.519 mo68.8199 228.594 li59.6016 223.255 li64.8956 232.519 li68.8199 232.519 li0 0 0 1 cmyks73.7486 237.402 mo73.7486 231.424 li78.9058 234.39 li81.8721 229.233 li84.8384 234.39 li90.0411 231.424 li90.0411 237.402 li96.0196 237.402 li93.0533 242.559 li97.982 245.708 li93.0533 248.538 li96.0196 253.74 li90.0411 253.74 li90.0411 259.719 li84.8384 256.707 li81.8721 261.909 li78.9058 256.707 li73.4752 259.855 li73.4292 253.74 li67.7247 253.74 li70.6002 248.812 li65.3062 245.708 li70.7369 242.559 li67.7247 237.402 li73.7486 237.402 li0 0 0 1 cmyks51.022 218.372 mo44.9522 214.858 li39.0191 220.836 li36.8287 229.005 li42.7618 232.519 li59.2364 232.519 li51.022 218.372 li0 0 0 1 cmyks112.632 208.651 mo106.653 202.673 li98.4839 200.528 li94.9698 206.552 li94.9698 222.936 li109.118 214.721 li112.632 208.651 li0 0 0 1 cmyks98.8946 232.519 mo104.189 223.255 li94.9698 228.594 li94.9698 232.519 li98.8946 232.519 li0 0 0 1 cmyks86.6641 227.727 mo90.0411 225.765 li90.0411 215.131 li84.7476 224.305 li86.6641 227.727 li0 0 0 1 cmyks112.358 237.402 mo103.185 242.742 li99.8077 240.779 li101.725 237.402 li112.358 237.402 li0 0 0 1 cmyks16.7486 176.523 mo22.0882 185.742 li18.9849 184.007 15.9273 182.228 12.824 180.448 cv12.824 176.523 li16.7486 176.523 li0 0 0 1 cmyks17.6158 168.263 mo19.6238 171.64 li30.2115 171.64 li20.993 166.346 li17.6158 168.263 li0 0 0 1 cmyks26.9712 194.321 mo30.4854 200.345 li24.5523 206.324 li16.4292 208.514 li12.824 202.171 li12.824 186.107 li26.9712 194.321 li0 0 0 1 cmyks36.646 194.185 mo42.6246 188.251 li44.815 180.037 li38.7916 176.523 li22.4078 176.523 li30.5767 190.716 li36.646 194.185 li0 0 0 1 cmyks2.64698 184.738 mo7.94068 193.911 li7.94068 183.323 li4.56373 181.315 li2.64698 184.738 li0 0 0 1 cmyks44.9976 207.876 mo47.5992 205.274 li42.8531 206.506 li41.5748 211.298 li44.1763 208.651 li46.1387 209.838 li44.9976 207.876 li0 0 0 1 cmyks34.0904 203.768 mo38.7916 202.536 li40.0689 197.744 li37.5132 200.345 li35.5054 199.205 li36.646 201.212 li34.0904 203.768 li0 0 0 1 cmyks37.3306 208.012 mo27.0626 210.796 li19.5782 218.326 li25.5108 219.878 li27.0626 225.811 li34.5923 218.326 li37.3306 208.012 li0 0 0 1 cmyks14.1016 216.774 mo17.5701 213.306 li13.9649 214.265 li12.824 212.256 li12.824 214.539 li9.30982 215.497 li14.1016 216.774 li0 0 0 1 cmyks23.0464 229.781 mo18.711 234.162 li12.7327 232.565 li11.2266 226.632 li15.5164 222.296 li21.4493 223.848 li23.0464 229.781 li0 0 0 1 cmyks20.1714 239.639 mo14.2386 238.041 li16.201 245.708 li14.2386 253.101 li20.1714 251.504 li24.5523 255.839 li27.2906 245.571 li24.5523 235.303 li20.1714 239.639 li0 0 0 1 cmyks33.0406 232.474 mo31.1246 231.333 li32.0367 227.773 li28.5689 231.287 li29.8462 236.033 li30.8047 232.474 li33.0406 232.474 li0 0 0 1 cmyks41.438 237.402 mo55.5396 245.708 li41.5748 253.74 li34.5469 253.74 li32.4019 245.708 li32.4019 245.571 li34.5469 237.402 li41.438 237.402 li0 0 0 1 cmyks32.0367 263.37 mo31.1246 259.81 li33.0406 258.669 li30.8047 258.669 li29.8462 255.109 li28.5689 259.901 li32.0367 263.37 li0 0 0 1 cmyks36.8287 262.183 mo39.0191 270.352 li44.9522 276.331 li51.022 272.816 li59.2364 258.669 li42.8985 258.669 li36.8287 262.183 li0 0 0 1 cmyks11.2266 264.51 mo15.5164 268.846 li21.4493 267.249 li23.0464 261.316 li18.711 256.98 li12.7327 258.578 li11.2266 264.51 li0 0 0 1 cmyks19.5782 272.862 mo27.0626 280.392 li37.3306 283.176 li34.5923 272.862 li27.0626 265.377 li25.5108 271.31 li19.5782 272.862 li0 0 0 1 cmyks9.30982 275.646 mo12.824 276.559 li12.824 278.84 li13.9649 276.878 li17.5701 277.836 li14.1016 274.322 li9.30982 275.646 li0 0 0 1 cmyks12.824 288.698 mo12.824 305.036 li26.9712 296.867 li30.4854 290.797 li24.5523 284.819 li16.3836 282.628 li12.824 288.698 li0 0 0 1 cmyks42.8531 284.59 mo47.5992 285.914 li44.9976 283.267 li46.1387 281.35 li44.1763 282.491 li41.5748 279.844 li42.8531 284.59 li0 0 0 1 cmyks34.0904 287.375 mo36.646 289.976 li35.5054 291.938 li37.5132 290.797 li40.0689 293.398 li38.7916 288.652 li34.0904 287.375 li0 0 0 1 cmyks4.56373 309.828 mo7.94068 307.865 li7.94068 297.277 li2.64698 306.451 li4.56373 309.828 li0 0 0 1 cmyks30.5767 300.472 mo22.5445 314.437 li38.8824 314.528 li44.815 311.105 li42.6705 302.937 li36.646 296.958 li30.5767 300.472 li0 0 0 1 cmyks12.824 310.74 mo12.824 314.346 li16.8855 314.391 li22.0882 305.401 li12.824 310.74 li0 0 0 1 cmyks20.993 324.842 mo30.4854 319.411 li19.7151 319.32 li17.6158 322.88 li20.993 324.842 li0 0 0 1 cmyks112.358 253.74 mo103.185 248.446 li99.8077 250.363 li101.725 253.74 li112.358 253.74 li0 0 0 1 cmyks86.6641 263.461 mo90.0411 265.377 li90.0411 276.057 li84.7476 266.838 li86.6641 263.461 li0 0 0 1 cmyks94.9698 258.669 mo94.9698 262.594 li104.189 267.888 li98.8946 258.669 li94.9698 258.669 li0 0 0 1 cmyks94.9698 284.545 mo98.4839 290.615 li106.653 288.424 li112.632 282.491 li109.118 276.421 li94.9698 268.252 li94.9698 284.545 li0 0 0 1 cmyks64.8956 258.669 mo59.6016 267.888 li68.5464 262.685 li68.5464 258.669 li64.8956 258.669 li0 0 0 1 cmyks77.0806 263.461 mo73.5665 265.515 li73.6119 276.285 li79.0425 266.838 li77.0806 263.461 li0 0 0 1 cmyks63.8912 250.591 mo62.066 253.74 li51.4327 253.74 li60.3775 248.538 li63.8912 250.591 li0 0 0 1 cmyks51.1128 282.491 mo57.1373 288.424 li65.3062 290.66 li68.7291 284.728 li68.5918 268.344 li54.6724 276.421 li51.1128 282.491 li0 0 0 1 cmyks73.6578 286.005 mo73.7486 292.942 li81.8721 295.087 li90.0411 292.942 li90.0411 285.914 li81.8721 271.767 li73.6578 286.005 li0 0 0 1 cmyks72.3794 297.643 mo68.8199 296.684 li68.5918 294.768 li67.6792 296.365 li64.1197 295.406 li67.6334 298.92 li72.3794 297.643 li0 0 0 1 cmyks66.1275 304.397 mo60.1949 305.994 li58.5972 311.927 li62.9332 316.262 li68.8658 314.665 li70.4629 308.732 li66.1275 304.397 li0 0 0 1 cmyks71.6495 302.937 mo75.939 307.272 li74.3423 313.159 li81.8721 311.197 li89.4024 313.159 li87.8047 307.272 li92.1861 302.937 li81.8721 300.198 li71.6495 302.937 li0 0 0 1 cmyks54.6275 307.911 mo56.1334 301.978 li62.1119 300.381 li54.6275 292.896 li44.313 290.158 li47.0972 300.381 li54.6275 307.911 li0 0 0 1 cmyks48.6031 314.574 mo50.8848 314.62 li51.8433 318.133 li53.1211 313.387 li49.607 309.919 li50.5655 313.479 li48.6031 314.574 li0 0 0 1 cmyks119.477 290.158 mo109.164 292.896 li101.679 300.381 li107.612 301.978 li109.164 307.911 li116.693 300.381 li119.477 290.158 li0 0 0 1 cmyks103.596 305.994 mo97.6626 304.397 li93.3726 308.732 li94.8785 314.665 li100.812 316.262 li105.193 311.927 li103.596 305.994 li0 0 0 1 cmyks94.9698 294.402 mo94.9698 296.639 li91.3648 297.597 li96.2022 298.92 li99.6705 295.406 li96.1109 296.365 li94.9698 294.402 li0 0 0 1 cmyks112.86 314.62 mo115.142 314.574 li113.225 313.479 li114.184 309.919 li110.715 313.387 li111.947 318.133 li112.86 314.62 li0 0 0 1 cmyks314.665 529.888 mo314.665 513.595 li300.518 521.719 li297.003 527.788 li302.982 533.767 li311.151 535.957 li314.665 529.888 li0 0 0 1 cmyks314.62 539.791 mo313.524 541.753 li309.919 540.749 li313.433 544.263 li318.179 542.985 li314.62 542.027 li314.62 539.791 li0 0 0 1 cmyks305.994 551.337 mo304.442 557.27 li308.778 561.605 li314.665 560.008 li316.126 553.893 li311.927 549.739 li305.994 551.337 li0 0 0 1 cmyks290.797 528.655 mo291.983 526.693 li290.022 527.834 li287.42 525.187 li288.652 529.933 li293.444 531.257 li290.797 528.655 li0 0 0 1 cmyks270.352 530.116 mo262.183 527.971 li258.669 533.995 li258.669 550.332 li272.816 542.21 li276.331 536.14 li270.352 530.116 li0 0 0 1 cmyks281.351 537.235 mo283.312 536.14 li285.914 538.741 li284.636 533.995 li279.844 532.671 li282.491 535.318 li281.351 537.235 li0 0 0 1 cmyks283.176 528.473 mo272.862 525.689 li265.377 518.205 li271.31 516.653 li272.862 510.72 li280.392 518.205 li283.176 528.473 li0 0 0 1 cmyks268.298 559.916 mo284.591 559.916 li290.706 556.402 li288.47 548.233 li282.491 542.255 li276.467 545.769 li268.298 559.916 li0 0 0 1 cmyks296.411 558.775 mo294.448 559.916 li296.684 559.916 li297.643 563.476 li298.92 558.73 li295.452 555.262 li296.411 558.775 li0 0 0 1 cmyks301.978 547.275 mo307.911 545.723 li300.381 538.193 li290.158 535.455 li293.033 546.362 li300.381 553.208 li301.978 547.275 li0 0 0 1 cmyks292.942 581.183 mo285.914 581.183 li271.767 573.014 li285.64 565.028 li285.686 564.982 285.731 564.937 285.823 564.891 cv292.942 564.845 li295.087 573.014 li292.942 581.183 li0 0 0 1 cmyks302.982 583.282 mo307.317 578.947 li313.479 580.59 li311.516 573.06 li313.342 565.484 li307.317 567.082 li302.982 562.746 li300.244 573.151 li302.982 583.282 li0 0 0 1 cmyks268.298 586.112 mo276.467 600.259 li282.491 603.773 li288.47 597.795 li290.706 589.626 li284.591 586.112 li268.298 586.112 li0 0 0 1 cmyks300.381 592.82 mo301.978 598.753 li307.911 600.305 li300.381 607.835 li290.158 610.619 li292.896 600.305 li300.381 592.82 li0 0 0 1 cmyks294.813 586.112 mo296.365 587.252 li295.406 590.812 li298.92 587.298 li297.643 582.506 li296.684 586.112 li294.813 586.112 li0 0 0 1 cmyks314.848 586.066 mo308.778 584.469 li304.442 588.805 li305.994 594.737 li311.927 596.334 li316.308 591.953 li314.848 586.066 li0 0 0 1 cmyks309.919 605.279 mo313.524 604.321 li314.62 606.283 li314.62 604.002 li318.179 603.089 li313.433 601.811 li309.919 605.279 li0 0 0 1 cmyks311.151 610.071 mo302.982 612.262 li297.003 618.24 li300.518 624.31 li314.665 632.478 li314.665 616.141 li311.151 610.071 li0 0 0 1 cmyks322.925 637.27 mo324.888 633.894 li319.548 624.675 li319.548 635.308 li322.925 637.27 li0 0 0 1 cmyks307.774 646.763 mo297.003 646.854 li306.451 652.285 li309.873 650.368 li307.774 646.763 li0 0 0 1 cmyks314.665 638.183 mo305.401 632.844 li310.604 641.834 li314.665 641.789 li314.665 638.183 li0 0 0 1 cmyks288.652 616.095 mo287.42 620.841 li290.022 618.24 li291.983 619.381 li290.797 617.418 li293.444 614.817 li288.652 616.095 li0 0 0 1 cmyks290.797 624.401 mo284.819 630.379 li282.674 638.548 li288.606 641.971 li304.945 641.834 li296.867 627.915 li290.797 624.401 li0 0 0 1 cmyks285.914 607.287 mo283.312 609.934 li281.351 608.794 li282.491 610.71 li279.844 613.357 li284.636 612.079 li285.914 607.287 li0 0 0 1 cmyks276.331 609.934 mo272.816 603.865 li258.669 595.695 li258.669 611.988 li262.183 618.057 li270.352 615.867 li276.331 609.934 li0 0 0 1 cmyks283.176 617.556 mo272.862 620.339 li265.377 627.869 li271.31 629.421 li272.862 635.354 li280.392 627.869 li283.176 617.556 li0 0 0 1 cmyks276.559 642.062 mo278.84 642.017 li276.923 640.921 li277.882 637.362 li274.368 640.83 li275.646 645.576 li276.559 642.062 li0 0 0 1 cmyks263.37 523.179 mo259.81 522.266 li258.669 524.183 li258.669 521.947 li255.109 520.988 li259.901 519.71 li263.37 523.179 li0 0 0 1 cmyks253.74 525.689 mo245.571 523.499 li237.402 525.689 li237.402 532.717 li245.571 546.819 li253.74 532.717 li253.74 525.689 li0 0 0 1 cmyks236.079 520.988 mo232.474 521.947 li232.474 524.183 li231.424 522.266 li227.819 523.179 li231.333 519.71 li236.079 520.988 li0 0 0 1 cmyks232.474 556.037 mo223.255 550.743 li228.594 559.916 li232.474 559.916 li232.474 556.037 li0 0 0 1 cmyks240.779 555.124 mo237.402 553.208 li237.402 542.574 li242.742 551.793 li240.779 555.124 li0 0 0 1 cmyks258.669 559.916 mo262.594 559.916 li267.888 550.743 li258.669 556.037 li258.669 559.916 li0 0 0 1 cmyks253.74 553.208 mo253.74 542.574 li248.446 551.793 li250.363 555.124 li253.74 553.208 li0 0 0 1 cmyks232.474 533.995 mo229.005 527.971 li220.836 530.116 li214.858 536.14 li218.326 542.21 li232.474 550.332 li232.474 533.995 li0 0 0 1 cmyks225.811 518.205 mo219.878 516.653 li218.326 510.72 li210.796 518.205 li208.012 528.473 li218.326 525.689 li225.811 518.205 li0 0 0 1 cmyks202.536 529.933 mo203.814 525.187 li201.212 527.834 li199.25 526.693 li200.391 528.655 li197.79 531.257 li202.536 529.933 li0 0 0 1 cmyks208.697 535.318 mo211.344 532.671 li206.552 533.995 li205.274 538.741 li207.921 536.14 li209.838 537.235 li208.697 535.318 li0 0 0 1 cmyks195.736 555.262 mo192.268 558.73 li193.545 563.476 li194.504 559.916 li196.74 559.916 li194.823 558.775 li195.736 555.262 li0 0 0 1 cmyks206.46 559.916 mo222.89 559.916 li214.767 545.769 li208.651 542.255 li202.673 548.233 li200.528 556.402 li206.46 559.916 li0 0 0 1 cmyks201.03 535.455 mo190.762 538.193 li183.277 545.723 li189.21 547.275 li190.762 553.208 li198.246 545.723 li201.03 535.455 li0 0 0 1 cmyks225.765 564.845 mo214.858 564.845 li224.122 570.276 li227.682 568.222 li225.765 564.845 li0 0 0 1 cmyks225.765 581.183 mo215.131 581.183 li224.122 576.026 li227.59 578.034 li225.765 581.183 li0 0 0 1 cmyks196.101 573.151 mo196.056 573.014 li198.246 564.845 li205.137 564.845 li219.239 573.106 li205.274 581.183 li198.246 581.183 li196.101 573.151 li0 0 0 1 cmyks194.823 587.252 mo196.74 586.112 li194.504 586.112 li193.545 582.506 li192.268 587.298 li195.736 590.812 li194.823 587.252 li0 0 0 1 cmyks208.651 603.773 mo214.767 600.259 li222.89 586.112 li206.552 586.112 li200.528 589.626 li202.673 597.795 li208.651 603.773 li0 0 0 1 cmyks223.255 595.331 mo232.245 590.173 li232.245 586.112 li228.594 586.112 li223.255 595.331 li0 0 0 1 cmyks263.506 568.222 mo265.423 564.845 li276.057 564.845 li266.883 570.139 li263.506 568.222 li0 0 0 1 cmyks263.506 577.806 mo265.423 581.183 li276.057 581.183 li266.883 575.843 li263.506 577.806 li0 0 0 1 cmyks259.719 564.845 mo256.752 570.048 li261.681 573.151 li256.752 576.026 li259.719 581.183 li253.74 581.183 li253.74 587.162 li248.538 584.195 li245.571 589.306 li242.605 584.195 li237.174 587.298 li237.128 581.183 li231.424 581.183 li234.299 576.254 li229.005 573.151 li234.436 570.048 li231.424 564.845 li237.402 564.845 li237.402 558.867 li242.605 561.879 li245.571 556.676 li248.538 561.879 li253.74 558.867 li253.74 564.845 li259.719 564.845 li0 0 0 1 cmyks240.779 590.904 mo237.265 592.957 li237.311 603.682 li242.742 594.281 li240.779 590.904 li0 0 0 1 cmyks258.669 589.991 mo267.888 595.331 li262.594 586.112 li258.669 586.112 li258.669 589.991 li0 0 0 1 cmyks253.74 592.866 mo253.74 603.454 li248.446 594.281 li250.363 590.904 li253.74 592.866 li0 0 0 1 cmyks218.326 603.865 mo214.858 609.934 li220.836 615.867 li229.005 618.103 li232.382 612.124 li232.291 595.832 li218.326 603.865 li0 0 0 1 cmyks176.569 529.568 mo176.569 513.595 li190.716 521.719 li194.185 527.788 li188.206 533.767 li180.083 535.957 li176.569 529.568 li0 0 0 1 cmyks177.664 541.708 mo176.569 539.745 li176.569 541.981 li173.009 542.939 li177.801 544.217 li181.224 540.749 li177.664 541.708 li0 0 0 1 cmyks186.746 557.27 mo182.365 561.605 li176.432 560.008 li174.88 554.075 li179.216 549.739 li185.148 551.337 li186.746 557.27 li0 0 0 1 cmyks177.938 565.484 mo179.9 573.151 li177.938 580.544 li183.871 578.947 li188.206 583.282 li190.944 573.014 li188.206 562.746 li183.871 567.082 li177.938 565.484 li0 0 0 1 cmyks176.432 586.02 mo174.88 591.953 li179.216 596.334 li185.148 594.737 li186.746 588.805 li182.365 584.469 li176.432 586.02 li0 0 0 1 cmyks177.801 601.811 mo173.009 603.089 li176.569 604.002 li176.569 606.283 li177.709 604.321 li181.224 605.279 li177.801 601.811 li0 0 0 1 cmyks189.21 598.753 mo183.277 600.305 li190.762 607.835 li201.03 610.619 li198.246 600.305 li190.762 592.82 li189.21 598.753 li0 0 0 1 cmyks176.569 616.141 mo176.569 632.478 li190.716 624.31 li194.185 618.24 li188.206 612.262 li180.083 610.071 li176.569 616.141 li0 0 0 1 cmyks171.64 635.308 mo171.64 624.675 li166.3 633.894 li168.263 637.27 li171.64 635.308 li0 0 0 1 cmyks181.36 650.368 mo184.737 652.285 li194.139 646.854 li183.414 646.763 li181.36 650.368 li0 0 0 1 cmyks180.585 641.834 mo185.787 632.844 li176.569 638.183 li176.569 641.789 li180.585 641.834 li0 0 0 1 cmyks258.669 624.082 mo255.109 625.085 li259.901 626.363 li263.37 622.849 li259.81 623.808 li258.669 621.891 li258.669 624.082 li0 0 0 1 cmyks253.74 613.357 mo245.571 599.21 li237.357 613.448 li237.402 620.339 li245.571 622.53 li253.74 620.339 li253.74 613.357 li0 0 0 1 cmyks231.424 623.808 mo227.819 622.849 li231.333 626.363 li236.079 625.085 li232.519 624.127 li232.336 622.165 li231.424 623.808 li0 0 0 1 cmyks239.639 634.715 mo238.041 640.648 li245.571 638.64 li253.102 640.648 li251.504 634.715 li255.885 630.379 li245.571 627.596 li235.349 630.379 li239.639 634.715 li0 0 0 1 cmyks234.162 636.175 mo229.827 631.84 li223.894 633.437 li222.296 639.37 li226.632 643.705 li232.565 642.108 li234.162 636.175 li0 0 0 1 cmyks261.362 631.84 mo257.026 636.175 li258.578 642.108 li264.51 643.705 li268.892 639.37 li267.294 633.437 li261.362 631.84 li0 0 0 1 cmyks218.326 620.339 mo208.012 617.556 li210.796 627.869 li218.326 635.354 li219.878 629.421 li225.811 627.869 li218.326 620.339 li0 0 0 1 cmyks208.697 610.71 mo209.838 608.794 li207.921 609.934 li205.274 607.287 li206.552 612.079 li211.344 613.357 li208.697 610.71 li0 0 0 1 cmyks197.79 614.817 mo200.391 617.418 li199.25 619.381 li201.212 618.24 li203.814 620.841 li202.536 616.095 li197.79 614.817 li0 0 0 1 cmyks194.321 627.915 mo186.244 641.834 li202.582 641.971 li208.514 638.548 li206.324 630.379 li200.391 624.401 li194.321 627.915 li0 0 0 1 cmyks245.617 16.201 mo253.147 14.2386 li251.55 20.1714 li255.931 24.5069 li245.617 27.2452 li235.394 24.5069 li239.684 20.1714 li238.087 14.2386 li245.617 16.201 li0 0 0 1 cmyks327.443 517.611 mo327.443 506.75 li0 0 0 1 cmyks256.935 0 mo262 0 li0 0 0 1 cmyks262 0 mo260.084 7.25611 li266.017 5.65894 li270.397 10.0401 li272.999 0 li0 0 0 1 cmyks234.299 0 mo256.935 0 li0 0 0 1 cmyks190.168 0 mo203.814 7.89502 li210.796 7.89502 li212.941 0 li0 0 0 1 cmyks212.941 0 mo218.189 0 li0 0 0 1 cmyks229.188 0 mo218.189 0 li0 0 0 1 cmyks218.189 0 mo220.882 10.0401 li225.171 5.65894 li231.104 7.25611 li229.188 0 li0 0 0 1 cmyks229.188 0 mo234.299 0 li0 0 0 1 cmyks163.745 26.378 mo163.745 15.6077 li166.483 10.8616 li171.64 13.8736 li171.64 7.89502 li177.618 7.89502 li174.606 2.73829 li179.307 0 li190.168 0 li0 0 0 1 cmyks163.745 49.1963 mo171.64 47.0513 li171.64 40.0689 li163.745 26.378 li0 0 0 1 cmyks163.745 49.1963 mo163.745 54.4444 li0 0 0 1 cmyks163.745 65.4429 mo171.001 67.4053 li169.404 61.4727 li173.785 57.1373 li163.745 54.4444 li0 0 0 1 cmyks163.745 26.378 mo163.745 49.1963 li0 0 0 1 cmyks163.745 65.4429 mo163.745 70.5088 li0 0 0 1 cmyks163.745 93.19 mo172.461 90.8169 li174.834 82.0088 li172.461 72.8819 li163.745 70.5088 li0 0 0 1 cmyks163.745 98.2559 mo163.745 93.19 li0 0 0 1 cmyks163.745 109.3 mo173.785 106.653 li169.404 102.272 li171.001 96.3389 li163.745 98.2559 li0 0 0 1 cmyks163.745 70.5088 mo163.745 93.19 li0 0 0 1 cmyks163.745 114.548 mo163.745 109.3 li0 0 0 1 cmyks163.745 137.367 mo171.64 123.676 li171.64 116.648 li163.745 114.548 li0 0 0 1 cmyks163.745 137.367 mo163.745 148.091 li166.483 152.837 li168.217 151.879 169.951 150.83 171.64 149.826 cv171.64 155.53 li177.755 155.576 li174.606 161.006 li179.307 163.745 li174.606 166.437 li177.618 171.594 li171.64 171.594 li171.64 177.618 li166.483 174.606 li163.745 179.353 li163.745 179.261 li161.052 174.606 li155.85 177.618 li155.85 171.594 li149.871 171.594 li152.837 166.437 li148.183 163.745 li137.413 163.745 li0 0 0 1 cmyks163.745 114.548 mo163.745 137.367 li0 0 0 1 cmyks163.745 98.2559 mo163.745 109.3 li0 0 0 1 cmyks163.745 54.4444 mo163.745 65.4429 li0 0 0 1 cmyks212.941 0 mo190.168 0 li0 0 0 1 cmyks301.111 0 mo311.927 0 li316.582 2.73829 li313.57 7.89502 li319.548 7.89502 li319.548 13.8736 li324.751 10.8616 li327.443 15.5621 li327.443 26.4693 li0 0 0 1 cmyks272.999 0 mo278.338 0 li0 0 0 1 cmyks278.338 0 mo280.438 7.89502 li287.42 7.89502 li301.111 0 li0 0 0 1 cmyks301.111 0 mo278.338 0 li0 0 0 1 cmyks327.443 54.4444 mo317.495 57.1373 li321.556 61.2442 li320.096 67.4053 li327.443 65.4883 li0 0 0 1 cmyks327.443 49.1963 mo327.443 54.4444 li0 0 0 1 cmyks327.443 26.4693 mo327.443 49.1963 li0 0 0 1 cmyks327.443 26.4693 mo319.548 40.0689 li319.548 47.0513 li327.443 49.1963 li0 0 0 1 cmyks327.443 65.4883 mo327.443 70.5542 li0 0 0 1 cmyks327.443 70.5542 mo318.772 72.836 li316.673 82.0088 li318.909 90.9082 li327.443 93.19 li0 0 0 1 cmyks327.443 98.3013 mo320.324 96.3848 li321.785 102.318 li317.495 106.653 li327.443 109.3 li0 0 0 1 cmyks327.443 93.19 mo327.443 98.3013 li0 0 0 1 cmyks327.443 70.5542 mo327.443 93.19 li0 0 0 1 cmyks327.443 109.3 mo327.443 114.548 li0 0 0 1 cmyks327.443 114.548 mo319.548 116.648 li319.548 123.676 li327.443 137.275 li0 0 0 1 cmyks353.913 163.745 mo343.051 163.745 li338.351 166.437 li341.363 171.594 li335.384 171.594 li335.384 177.618 li330.182 174.606 li327.443 179.353 li327.443 179.261 li324.751 174.606 li319.548 177.618 li319.548 171.594 li313.57 171.594 li316.582 166.437 li311.927 163.745 li311.881 163.745 li316.582 161.006 li313.479 155.576 li319.548 155.53 li319.548 149.826 li324.751 152.837 li327.443 148.183 li327.443 137.275 li0 0 0 1 cmyks327.443 114.548 mo327.443 137.275 li0 0 0 1 cmyks327.443 109.3 mo327.443 98.3013 li0 0 0 1 cmyks327.443 54.4444 mo327.443 65.4883 li0 0 0 1 cmyks272.999 0 mo262 0 li0 0 0 1 cmyks397.998 163.745 mo400.325 172.461 li409.315 174.88 li418.306 172.461 li420.679 163.745 li0 0 0 1 cmyks381.934 163.745 mo392.932 163.745 li0 0 0 1 cmyks381.934 163.745 mo384.626 173.739 li388.916 169.404 li394.849 171.001 li392.932 163.745 li0 0 0 1 cmyks392.932 163.745 mo397.998 163.745 li0 0 0 1 cmyks353.913 163.745 mo367.512 171.594 li374.495 171.594 li376.685 163.745 li0 0 0 1 cmyks376.685 163.745 mo353.913 163.745 li0 0 0 1 cmyks376.685 163.745 mo381.934 163.745 li0 0 0 1 cmyks327.443 190.168 mo319.548 203.768 li319.548 210.796 li327.443 212.896 li335.384 210.796 li335.384 203.768 li327.443 190.077 li327.443 190.168 li0 0 0 1 cmyks287.329 155.712 mo280.438 155.804 li278.338 163.745 li280.438 171.594 li287.42 171.594 li301.111 163.745 li287.329 155.712 li0 0 0 1 cmyks272.999 163.745 mo270.397 153.705 li266.017 158.04 li260.084 156.443 li262 163.745 li260.084 171.001 li266.017 169.404 li270.397 173.739 li272.999 163.745 li0 0 0 1 cmyks327.443 218.189 mo317.495 220.882 li321.556 224.943 li320.096 231.15 li327.443 229.188 li327.443 229.142 li334.745 231.104 li333.148 225.171 li337.483 220.882 li327.443 218.144 li327.443 218.189 li0 0 0 1 cmyks327.443 234.299 mo318.772 236.581 li316.673 245.708 li318.909 254.607 li327.443 256.935 li336.206 254.562 li338.579 245.708 li336.206 236.581 li327.443 234.253 li327.443 234.299 li0 0 0 1 cmyks327.443 262 mo320.324 260.084 li321.785 266.017 li317.495 270.352 li327.443 273.044 li327.443 272.999 li337.483 270.352 li333.148 266.017 li334.745 260.084 li327.443 262 li0 0 0 1 cmyks319.548 287.375 mo327.443 301.02 li327.443 301.111 li335.384 287.375 li335.384 280.392 li327.443 278.247 li327.443 278.292 li319.548 280.392 li319.548 287.375 li0 0 0 1 cmyks272.999 327.443 mo270.397 317.403 li266.017 321.739 li260.084 320.142 li262 327.443 li260.084 334.7 li266.017 333.102 li270.352 337.483 li272.999 327.443 li0 0 0 1 cmyks278.338 327.443 mo280.392 335.338 li287.42 335.338 li301.111 327.443 li287.329 319.457 li280.438 319.502 li278.338 327.443 li0 0 0 1 cmyks353.867 327.443 mo343.051 327.443 li338.351 324.705 li341.454 319.274 li335.384 319.229 li335.384 313.57 li333.65 314.574 331.916 315.578 330.182 316.536 cv327.443 311.79 li327.443 311.927 li324.751 316.536 li319.548 313.57 li319.548 319.229 li313.479 319.274 li316.582 324.705 li311.881 327.443 li316.536 330.182 li313.57 335.338 li319.548 335.338 li319.548 341.317 li324.705 338.351 li327.443 343.005 li327.443 353.913 li0 0 0 1 cmyks376.685 327.443 mo374.495 319.502 li367.604 319.457 li353.867 327.443 li0 0 0 1 cmyks376.685 327.443 mo353.867 327.443 li0 0 0 1 cmyks392.932 327.443 mo394.849 320.142 li388.916 321.739 li384.626 317.403 li381.934 327.443 li0 0 0 1 cmyks381.934 327.443 mo392.932 327.443 li0 0 0 1 cmyks420.679 327.443 mo418.306 318.681 li409.315 316.262 li400.325 318.681 li397.998 327.443 li0 0 0 1 cmyks397.998 327.443 mo392.932 327.443 li0 0 0 1 cmyks381.934 327.443 mo376.685 327.443 li0 0 0 1 cmyks254.607 154.937 mo245.571 152.518 li236.626 154.937 li234.299 163.745 li236.626 172.461 li245.571 174.88 li254.607 172.461 li256.935 163.745 li254.607 154.937 li0 0 0 1 cmyks229.188 163.745 mo231.104 156.443 li225.171 158.04 li220.882 153.705 li218.189 163.745 li220.882 173.739 li225.171 169.404 li231.104 171.001 li229.188 163.745 li0 0 0 1 cmyks203.905 155.712 mo190.123 163.745 li190.168 163.745 li203.814 171.594 li210.796 171.594 li212.941 163.745 li210.796 155.804 li203.905 155.712 li0 0 0 1 cmyks163.745 190.168 mo155.85 203.768 li155.85 210.796 li163.745 212.896 li171.64 210.796 li171.64 203.768 li163.745 190.077 li163.745 190.168 li0 0 0 1 cmyks114.64 163.745 mo116.693 171.594 li123.722 171.594 li137.413 163.745 li0 0 0 1 cmyks163.745 218.189 mo153.75 220.882 li157.857 224.943 li156.352 231.15 li163.745 229.188 li163.745 229.142 li171.001 231.104 li169.404 225.171 li173.785 220.882 li163.745 218.144 li163.745 218.189 li0 0 0 1 cmyks163.745 234.299 mo155.074 236.581 li152.929 245.708 li155.211 254.607 li163.745 256.935 li172.461 254.562 li174.834 245.708 li172.461 236.581 li163.745 234.253 li163.745 234.299 li0 0 0 1 cmyks163.745 262 mo156.58 260.084 li158.086 266.017 li153.75 270.352 li163.745 273.044 li163.745 272.999 li173.785 270.352 li169.404 266.017 li171.001 260.084 li163.745 262 li0 0 0 1 cmyks163.745 278.292 mo155.85 280.392 li155.85 287.375 li163.745 301.02 li163.745 301.111 li171.64 287.375 li171.64 280.392 li163.745 278.247 li163.745 278.292 li0 0 0 1 cmyks137.413 327.443 mo123.63 319.457 li116.693 319.502 li114.64 327.352 li0 0 0 1 cmyks163.699 353.776 mo163.699 343.097 li166.438 338.351 li171.64 341.317 li171.64 335.338 li177.573 335.338 li174.606 330.182 li179.307 327.443 li174.606 324.705 li177.755 319.274 li171.64 319.229 li171.64 313.57 li169.951 314.574 168.217 315.578 166.483 316.536 cv163.791 311.881 li161.052 316.536 li155.85 313.57 li155.85 319.229 li149.734 319.274 li152.837 324.705 li148.137 327.443 li137.413 327.443 li0 0 0 1 cmyks190.123 327.443 mo203.768 335.338 li210.796 335.338 li212.941 327.443 li210.796 319.502 li203.905 319.457 li190.123 327.443 li0 0 0 1 cmyks218.189 327.443 mo220.836 337.483 li225.171 333.102 li231.104 334.7 li229.188 327.443 li231.104 320.142 li225.171 321.739 li220.882 317.403 li218.189 327.443 li0 0 0 1 cmyks236.626 318.681 mo234.299 327.443 li236.581 336.16 li245.571 338.579 li254.562 336.16 li256.935 327.443 li254.607 318.681 li245.571 316.262 li236.626 318.681 li0 0 0 1 cmyks163.699 376.64 mo171.64 374.495 li171.64 367.467 li163.699 353.776 li0 0 0 1 cmyks163.699 376.64 mo163.699 353.776 li0 0 0 1 cmyks163.699 392.886 mo163.699 381.888 li0 0 0 1 cmyks163.699 392.886 mo163.699 397.952 li0 0 0 1 cmyks163.699 392.886 mo170.956 394.803 li169.358 388.87 li173.739 384.581 li163.699 381.888 li0 0 0 1 cmyks163.699 420.633 mo172.461 418.26 li174.834 409.407 li172.461 400.279 li163.699 397.952 li0 0 0 1 cmyks163.699 420.633 mo163.699 397.952 li0 0 0 1 cmyks163.699 376.64 mo163.699 381.888 li0 0 0 1 cmyks163.699 436.697 mo163.699 425.745 li0 0 0 1 cmyks163.699 436.697 mo163.699 441.946 li0 0 0 1 cmyks163.699 464.81 mo171.64 451.073 li171.64 444.091 li163.699 441.946 li0 0 0 1 cmyks163.699 436.697 mo173.739 434.051 li169.358 429.715 li170.956 423.782 li163.699 425.745 li0 0 0 1 cmyks163.699 464.81 mo163.699 441.946 li0 0 0 1 cmyks190.123 491.142 mo203.768 499.083 li210.796 499.083 li212.941 491.142 li210.796 483.247 li203.905 483.201 li190.123 491.142 li0 0 0 1 cmyks163.699 506.795 mo166.438 502.049 li171.64 505.016 li171.64 499.083 li177.573 499.083 li174.606 493.88 li179.307 491.142 li174.606 488.449 li177.709 483.019 li171.64 482.927 li171.64 477.314 li169.906 478.318 168.171 479.276 166.438 480.28 cv163.699 475.534 li0 0 0 1 cmyks163.699 506.795 mo163.699 475.534 li0 0 0 1 cmyks163.699 464.81 mo163.699 475.534 li0 0 0 1 cmyks218.189 491.142 mo218.189 491.142 li220.836 501.182 li225.171 496.801 li231.104 498.398 li229.188 491.142 li229.142 491.142 li231.104 483.886 li225.171 485.483 li220.836 481.147 li218.189 491.142 li0 0 0 1 cmyks254.562 482.425 mo245.571 480.006 li236.581 482.425 li234.253 491.142 li234.299 491.142 li236.581 499.904 li245.571 502.277 li254.562 499.904 li256.935 491.142 li254.562 482.425 li0 0 0 1 cmyks262 491.142 mo260.084 498.398 li266.017 496.801 li270.352 501.182 li272.999 491.142 li270.352 481.147 li266.017 485.483 li260.084 483.886 li262 491.142 li0 0 0 1 cmyks163.699 420.633 mo163.699 425.745 li0 0 0 1 cmyks327.443 353.913 mo319.548 367.467 li319.548 374.495 li327.443 376.64 li0 0 0 1 cmyks327.443 353.913 mo327.443 376.64 li0 0 0 1 cmyks327.443 397.998 mo327.443 392.932 li0 0 0 1 cmyks327.443 381.934 mo327.443 392.932 li0 0 0 1 cmyks327.443 381.934 mo317.449 384.581 li321.556 388.642 li320.096 394.849 li327.443 392.932 li0 0 0 1 cmyks327.443 397.998 mo318.772 400.279 li316.673 409.407 li318.909 418.306 li327.443 420.633 li0 0 0 1 cmyks327.443 397.998 mo327.443 420.633 li0 0 0 1 cmyks327.443 381.934 mo327.443 376.64 li0 0 0 1 cmyks327.443 441.991 mo327.443 436.789 li0 0 0 1 cmyks327.443 436.789 mo327.443 425.745 li0 0 0 1 cmyks327.443 425.745 mo320.278 423.782 li321.739 429.715 li317.449 434.051 li327.443 436.789 li0 0 0 1 cmyks327.443 441.991 mo327.443 464.764 li0 0 0 1 cmyks327.443 441.991 mo319.548 444.091 li319.548 451.073 li327.443 464.764 li0 0 0 1 cmyks287.283 483.201 mo280.392 483.247 li278.292 491.142 li278.338 491.142 li280.392 499.083 li287.42 499.083 li301.111 491.142 li287.283 483.201 li0 0 0 1 cmyks327.443 475.626 mo324.705 480.28 li319.548 477.314 li319.548 482.927 li313.433 483.019 li316.536 488.449 li311.881 491.142 li316.536 493.88 li313.57 499.083 li319.548 499.083 li319.548 505.016 li324.705 502.049 li327.443 506.75 li0 0 0 1 cmyks327.443 475.626 mo327.443 506.75 li0 0 0 1 cmyks327.443 475.626 mo327.443 464.764 li0 0 0 1 cmyks327.443 425.745 mo327.443 420.633 li0 0 0 1 cmyks491.142 190.168 mo491.142 179.261 li488.449 174.606 li483.292 177.618 li483.292 171.594 li477.314 171.594 li480.326 166.437 li475.626 163.745 li464.81 163.745 li0 0 0 1 cmyks491.142 218.189 mo491.142 212.896 li0 0 0 1 cmyks491.142 234.299 mo491.142 229.188 li0 0 0 1 cmyks491.142 229.188 mo491.142 218.189 li0 0 0 1 cmyks491.142 190.168 mo491.142 212.896 li0 0 0 1 cmyks436.743 163.745 mo442.037 163.745 li0 0 0 1 cmyks442.037 163.745 mo444.136 171.594 li451.119 171.594 li464.81 163.745 li0 0 0 1 cmyks420.679 163.745 mo425.745 163.745 li0 0 0 1 cmyks425.745 163.745 mo423.782 171.001 li429.715 169.404 li434.096 173.739 li436.743 163.745 li0 0 0 1 cmyks425.745 163.745 mo436.743 163.745 li0 0 0 1 cmyks491.142 190.168 mo483.292 203.768 li483.292 210.796 li491.142 212.896 li0 0 0 1 cmyks491.142 218.189 mo481.239 220.882 li485.3 224.943 li483.84 231.15 li491.142 229.188 li0 0 0 1 cmyks464.81 163.745 mo442.037 163.745 li0 0 0 1 cmyks491.142 234.299 mo482.517 236.581 li480.418 245.708 li482.608 254.607 li491.142 256.935 li0 0 0 1 cmyks491.142 262 mo484.023 260.084 li485.483 266.017 li481.239 270.352 li491.142 273.044 li0 0 0 1 cmyks491.142 278.292 mo483.292 280.392 li483.292 287.375 li491.142 301.02 li0 0 0 1 cmyks425.745 327.443 mo420.679 327.443 li0 0 0 1 cmyks436.743 327.443 mo434.096 317.403 li429.715 321.739 li423.782 320.142 li425.745 327.443 li0 0 0 1 cmyks436.743 327.443 mo442.037 327.443 li0 0 0 1 cmyks464.81 327.443 mo451.073 319.457 li444.136 319.502 li442.037 327.443 li0 0 0 1 cmyks425.745 327.443 mo436.743 327.443 li0 0 0 1 cmyks491.142 301.02 mo491.142 311.927 li488.449 316.536 li483.292 313.57 li483.292 319.229 li477.177 319.274 li480.326 324.705 li475.626 327.443 li464.81 327.443 li0 0 0 1 cmyks464.81 327.443 mo442.037 327.443 li0 0 0 1 cmyks491.142 262 mo491.142 256.935 li0 0 0 1 cmyks491.142 273.044 mo491.142 278.292 li0 0 0 1 cmyks491.142 273.044 mo491.142 262 li0 0 0 1 cmyks491.142 278.292 mo491.142 301.02 li0 0 0 1 cmyks491.142 234.299 mo491.142 256.935 li0 0 0 1 cmyks397.998 327.443 mo420.679 327.443 li0 0 0 1 cmyks397.998 163.745 mo420.679 163.745 li0 0 0 1 cmyks114.64 163.745 mo109.3 163.745 li0 0 0 1 cmyks98.3013 163.745 mo96.3848 171.001 li102.318 169.404 li106.653 173.739 li109.3 163.745 li0 0 0 1 cmyks98.3013 163.745 mo93.19 163.745 li0 0 0 1 cmyks70.6002 163.745 mo72.8819 172.461 li81.8721 174.88 li90.8628 172.461 li93.19 163.745 li0 0 0 1 cmyks109.3 163.745 mo98.3013 163.745 li0 0 0 1 cmyks70.6002 163.745 mo65.4888 163.745 li0 0 0 1 cmyks54.4898 163.745 mo57.1373 173.739 li61.4727 169.404 li67.4058 171.001 li65.4888 163.745 li0 0 0 1 cmyks54.4898 163.745 mo49.1963 163.745 li0 0 0 1 cmyks26.4693 163.745 mo40.0689 171.594 li47.0972 171.594 li49.1963 163.745 li0 0 0 1 cmyks54.4898 163.745 mo65.4888 163.745 li0 0 0 1 cmyks70.6002 163.745 mo93.19 163.745 li0 0 0 1 cmyks26.4693 163.745 mo15.6077 163.745 li10.9073 166.437 li13.8736 171.594 li7.94068 171.594 li7.94068 177.618 li2.73829 174.606 li0 179.353 li0 0 0 1 cmyks0 178.668 mo0 179.353 li0 0 0 1 cmyks0 179.353 mo0 190.077 li0 0 0 1 cmyks0 218.144 mo0 212.896 li0 0 0 1 cmyks0 212.896 mo7.94068 210.796 li7.94068 203.768 li0 190.077 li0 0 0 1 cmyks0 229.142 mo0 234.253 li0 0 0 1 cmyks0 256.935 mo8.76221 254.562 li11.1353 245.708 li8.76221 236.581 li0 234.253 li0 0 0 1 cmyks0 229.142 mo7.25611 231.104 li5.65894 225.171 li10.0401 220.882 li0 218.144 li0 0 0 1 cmyks0 218.144 mo0 229.142 li0 0 0 1 cmyks0 190.077 mo0 212.896 li0 0 0 1 cmyks0 262 mo0 256.935 li0 0 0 1 cmyks0 272.999 mo10.0401 270.352 li5.65894 266.017 li7.25611 260.084 li0 262 li0 0 0 1 cmyks0 278.247 mo0 272.999 li0 0 0 1 cmyks0 301.111 mo7.94068 287.375 li7.94068 280.392 li0 278.247 li0 0 0 1 cmyks0 262 mo0 272.999 li0 0 0 1 cmyks26.4234 327.443 mo15.6077 327.443 li10.9073 324.705 li14.0562 319.274 li7.94068 319.229 li7.94068 313.57 li6.20655 314.574 4.47242 315.578 2.73829 316.536 cv0 311.79 li0 301.111 li0 0 0 1 cmyks49.1963 327.443 mo47.0972 319.502 li40.1602 319.457 li26.4234 327.443 li0 0 0 1 cmyks0 278.247 mo0 301.111 li0 0 0 1 cmyks65.4429 327.443 mo67.4058 320.142 li61.4727 321.739 li57.1373 317.403 li54.4444 327.443 li0 0 0 1 cmyks49.1963 327.443 mo54.4444 327.443 li0 0 0 1 cmyks65.4429 327.443 mo70.5542 327.443 li0 0 0 1 cmyks93.19 327.397 mo90.8628 318.681 li81.8721 316.262 li72.8819 318.681 li70.5542 327.443 li0 0 0 1 cmyks54.4444 327.443 mo65.4429 327.443 li0 0 0 1 cmyks93.19 327.397 mo98.2554 327.352 li0 0 0 1 cmyks109.254 327.352 mo106.653 317.403 li102.318 321.739 li96.3848 320.142 li98.2554 327.352 li0 0 0 1 cmyks109.254 327.352 mo114.64 327.352 li0 0 0 1 cmyks114.64 327.352 mo114.594 327.443 li137.413 327.443 li0 0 0 1 cmyks98.2554 327.352 mo109.254 327.352 li0 0 0 1 cmyks70.5542 327.443 mo93.19 327.397 li0 0 0 1 cmyks0 234.253 mo0 256.935 li0 0 0 1 cmyks26.4693 163.745 mo49.1963 163.745 li0 0 0 1 cmyks26.4234 327.443 mo49.1963 327.443 li0 0 0 1 cmyks327.443 545.632 mo317.449 548.279 li321.556 552.386 li320.096 558.547 li327.443 556.631 li0 0 0 1 cmyks327.443 545.632 mo327.443 540.384 li0 0 0 1 cmyks327.443 556.631 mo327.443 545.632 li0 0 0 1 cmyks327.443 517.611 mo327.443 540.384 li0 0 0 1 cmyks327.443 517.611 mo319.548 531.211 li319.548 538.193 li327.443 540.384 li0 0 0 1 cmyks327.443 561.696 mo318.772 563.978 li316.673 573.151 li318.909 582.05 li327.443 584.332 li0 0 0 1 cmyks327.443 589.489 mo320.278 587.526 li321.739 593.46 li317.449 597.795 li327.443 600.487 li0 0 0 1 cmyks327.443 605.69 mo327.443 600.487 li0 0 0 1 cmyks327.443 589.489 mo327.443 584.332 li0 0 0 1 cmyks327.443 600.487 mo327.443 589.489 li0 0 0 1 cmyks327.443 561.696 mo327.443 584.332 li0 0 0 1 cmyks327.443 561.696 mo327.443 556.631 li0 0 0 1 cmyks327.443 605.69 mo319.548 607.789 li319.548 614.817 li327.443 628.463 li0 0 0 1 cmyks327.443 628.463 mo327.443 639.37 li324.705 643.979 li319.548 641.013 li319.548 646.672 li313.433 646.717 li316.536 652.148 li311.881 654.886 li301.111 654.886 li0 0 0 1 cmyks301.111 654.886 mo287.283 646.9 li280.392 646.945 li278.292 654.886 li0 0 0 1 cmyks272.999 654.886 mo278.292 654.886 li0 0 0 1 cmyks301.111 654.886 mo278.292 654.886 li0 0 0 1 cmyks272.999 654.886 mo270.352 644.892 li266.017 649.228 li260.084 647.63 li262 654.886 li0 0 0 1 cmyks327.443 605.69 mo327.443 628.463 li0 0 0 1 cmyks163.699 540.384 mo171.64 538.193 li171.64 531.211 li163.699 517.52 li0 0 0 1 cmyks163.699 540.384 mo163.699 545.632 li0 0 0 1 cmyks163.699 556.631 mo163.699 545.632 li0 0 0 1 cmyks163.699 556.631 mo170.956 558.547 li169.358 552.614 li173.739 548.279 li163.699 545.632 li0 0 0 1 cmyks163.699 540.384 mo163.699 517.52 li0 0 0 1 cmyks163.699 584.332 mo172.461 582.004 li174.834 573.151 li172.461 564.023 li163.699 561.696 li0 0 0 1 cmyks163.699 584.332 mo163.699 589.443 li0 0 0 1 cmyks163.699 589.443 mo163.699 600.442 li0 0 0 1 cmyks163.699 600.442 mo163.699 605.69 li0 0 0 1 cmyks163.699 600.442 mo173.739 597.795 li169.358 593.414 li170.956 587.481 li163.699 589.443 li0 0 0 1 cmyks163.699 584.332 mo163.699 561.696 li0 0 0 1 cmyks163.699 556.631 mo163.699 561.696 li0 0 0 1 cmyks163.699 628.508 mo171.64 614.817 li171.64 607.789 li163.699 605.69 li0 0 0 1 cmyks163.699 628.508 mo163.699 639.278 li166.438 643.979 li168.171 643.02 169.906 642.017 171.64 641.013 cv171.64 646.672 li177.709 646.717 li174.606 652.148 li179.307 654.886 li190.123 654.886 li0 0 0 1 cmyks256.935 654.886 mo254.562 646.124 li245.571 643.705 li236.581 646.124 li234.253 654.886 li0 0 0 1 cmyks212.941 654.886 mo210.796 646.945 li203.905 646.9 li190.123 654.886 li0 0 0 1 cmyks229.142 654.886 mo231.104 647.63 li225.171 649.228 li220.836 644.892 li218.189 654.886 li0 0 0 1 cmyks212.941 654.886 mo218.189 654.886 li0 0 0 1 cmyks218.189 654.886 mo229.142 654.886 li0 0 0 1 cmyks256.935 654.886 mo262 654.886 li0 0 0 1 cmyks256.935 654.886 mo234.253 654.886 li0 0 0 1 cmyks229.142 654.886 mo234.253 654.886 li0 0 0 1 cmyks163.699 628.508 mo163.699 605.69 li0 0 0 1 cmyks212.941 654.886 mo190.123 654.886 li0 0 0 1 cmyks262 654.886 mo272.999 654.886 li0 0 0 1 cmyks114.64 163.745 mo137.413 163.745 li0 0 0 1 cmyks163.699 506.795 mo163.699 517.52 li0 0 0 1 cmyks234.299 0 mo236.626 8.76221 li245.571 11.1353 li254.607 8.76221 li256.935 0 li0 0 0 1 cmyksgrestore % PSGState%ADOBeginClientInjection: EndPageContent "AI10"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI10"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer%ADOBeginClientInjection: PageTrailer Start "AI10"%ADOEndClientInjection: PageTrailer Start "AI10"Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%ADOBeginClientInjection: PageTrailer End "AI10"%ADOEndClientInjection: PageTrailer End "AI10"%%Trailer%ADOBeginClientInjection: DocumentTrailer Start "AI10"%ADOEndClientInjection: DocumentTrailer Start "AI10"Adobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%ADOBeginClientInjection: DocumentTrailer End "AI10"%ADOEndClientInjection: DocumentTrailer End "AI10"%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 10.0%%For: (David Hirmes) (Thirteen/WNET)%%Title: (laser05box.eps)%%CreationDate: 8/1/09 4:46 PM%AI9_DataStream%Gb!U'NK.;dN@).gTQ`q7;2[3<SN_&m:\A/trUtIsD&4aMg5EtDO<pa(1p&87;T`nOdk<p@8:GR=9!WeV]5)V:Co;O<"="`l#(pHJ%?[_V2mDh.=?bQ9odG'0Lk%ZoZVYOt0b11eH&&.o*^V'F1h1r<PfAg0qBm)Y"gELKilZo"tX*$Y09:7.&lH.cs+&@*!m_=2Mp;PjC%&!,V^If',^2cl&HhnJlP#@BXljmq66=0M(a]mYCA]t[aS#Jd5*[+Xn4h#;9ec'A9Fi*X3DnbV:h]5Qfk]9g8paj2'u_tKZ#rVZ*_%?A9f?(I@uo=9$l:1/`\Ss82YbIs^q-Wt4snDsq&HIIl?G-B0,HE]'B5n(uk=>^E_P^6TkET%s;7p>bIc)pD<jP!ADbFsT<LmoR8L%#J^TCBY>>FJ*]DnIhhc#!<9g+(]=;Lf)LH=a/eH><]&]_qZJ<:qgBKfk!a_>C\uQQO8o(q6NdF>GB\B-qY'n`QZ!enX6EabIqoEp%%K.%!/_bTZ9r%ZM.s^le=*K/nk3?$W04)?&J,A1p,Mfi4?J'inI"21oe\B5KPu2kJIi80n+(*p=s8AEgpHg*1kJKL]e_?F7YJ7Ud%j6L?]Dm>0n#Q8RVn@RHL5MY'&0>;l5&JY9-C*2_:^]&Jh\c'_-HXd(!ps$F_2ns_:hfQLq0DdM1Du4W]Q#2f$L0<*lHBS;P<T\;9%3emTJ[&%!1k)n5sp5e(WQQt0o7D9M^qp#">5J2=6N=Jg"p$M.Y]D'(RHZB(F+MHJefgj)A!S$"V-$,.YjL:c-@"J7`5Co$uiVfgD%aiN4][G-0[!NpYCcf+o/R0q@0n*f*Mo07Zpo'tHJ<_G?l=-&$jhoK,KrUpKn/cO=."Pq+B2F7<9GJASWX^u3X$kIgcmQnC0oS.ho%L\J82?V/T$>^cSJ2fES0G;$.KW1^3^ZNlhI1A:8'dE;dpr8@U"nEei7VpCqsHi36XZ\QkeBD]%&g%oN12F!\&NR,bRiT[\H:S0gr%qY9<MV[oC@:\UdAe+MtrFFH86*M8Xq_in_/Sj%GjjRJF(:ED\[T'QuZCerV0bEMbDoON>ISd^[P4b!8&alCF&+$G)JpisG9hB&k]%QcJ^Xl1+PY4<>P,Hh?sXP=LZU4aQbidICn"ZoqS7/W]$ae"cG1Gr.X.q!?tgLJJsTIe`-c_hZ:MrSdHhICMD0+&3?eLZRK64?K,U%:QEK9UZ:<Q*;cu]lQPS@9ZMAl@A7E3e,@DfG^m(bglHl5Y]'EM0DiCX]?&0DfUcqU[jTqjmEtWH419Rl[WPf_H(26^/).9l>G&&o%f#R*Op#14uqmroq\ubKaXlEU9iPG)$H+H+@*\WS?LWcshbI4LqZHUM!N([<.q:Y[fIPO-Z+3b>ZA)?Bc?KYmkk@l"#1(Vj?l07hN%H9=?Z*_sb_5FAlnSX*uUXY<L])THFMe+(QTG^M>3*05(][rEFT;2"g+Nb'3QZgtIc.?DZInus*&%Y:pOV9EL#@jtu60ZZQjZ51?Q%5mTBiS;26KJIU'%:h7??T+?[WYJ,AU??ed_NU4#<+jV6Xoc6=>I<\TT?h%q0>CLqk`&L\_gA*K(bf;sJq.CQBht+Zm^HgB+s5gYY%6biE:2fJ`o7fRK$c%E5"\XjZ<rF]3HppKIDX1s#NMs%93qVHL]iT`?4>X8=Ir:SeL0(Al15mm0Ir'gVT?fd@K+eV&,bu_ZkqWIlB%>eLj8++F(eZKVlQ+8k-Q>8c5Hh`nXIKqO_2eH*gOEd1r]j0uM$7I8go+MRgR_5@c9%-bZ^%f5RN#N%]P,i7/16GXW*Nlfks5o]`K%QDtAee+:>E^46"uh>Ao@/018^s5qW$n%O5K;5N:,O7.Pnk)XF&I/WQrg[FU6^4eOqs5l7,f_Zbo*khUKiQ&"V]m]eSB3/r&qNLT(%+5bssld+RP[\)tP48O0orVVA0mo%L!:XT&n00Y<Qna5YoYN1pmpZ&:jQdB"44`Gi7gWq(.,P(e=p7_MFs8>&7PY5>23$f">P(.t<%,@mKShn==2+hFq.k*U$mrQ0V_mnEG3kfgE@$@Vd5:Ns#"^8"7(jS$jAX+.^/s6`hA@W[*Ip#`)%i:E#5mdG06hO`Rilb@cFUM)Ld%mTP'Oj4$fk]&T"/qcf3@^[Q`2(rX0q]mps1IK(,\pE+j,o4u_[ocIQ@Y:jZq&Z!bAV=Pe3^Aca5lSm8MkP-\Y)a>##qUKeVJ,e!b%l]8HiEV55s$I7esqnKeE^]*6OqtIRd7W>rN^O7O5s*m4_o'[O5T5NQ$])DUc/iXr%$A8+L+2`RR(&gDO]_M$Il^.)/hUFGrCeG4+%%_dGcrPs6no^DFM^[((Rc%fN%"5"7d_$g-A:T5?h^A7=R^]*-II/*-K`t.o_:OiD$`\ciJ5B[ol%fLG3&)[<LYFD-QiJ4&jj=lA(%qeOjShoQ$WG@B*1.m^m;X7'DpZ)ITm8B%q!RGmhn(]SOMo#pWOoCgG,W:6E=2]r"uRp>GAaF^&TB)*s6eB\$1+9282Fom,;rT_B%%09/8faRck_hnQ["S+9?q:@4/Co#2c`+oE.k]t8^kPMu/K>WhJh3#T3ns0O-EYEpU-k>s>*J,J;Zk+c1J\ZA$#):cRtZhj4[eIOln%=kR,Jq0LqbT@uX-kkfXRs7Tc`_je8&hOE@!M_gTWrCAR85FJMD'DRD([;n&$J,H,@T6K)g:Du?`+)J88do,H)n<_2GmJHeLhql(s%H1aKEKB;C3CL1@aq8<(k+4:t[INOIQ,Q.Q*VIL+oM_/WC?YoUfGKTX(>408rp[<%XI!BicUjqnN620[+eV@6+<r3b^;kr;5prha=%e&U'T;6It(0XsqHUYgI3J+rL4lF45EmdK#IqD\#\VB<#PDeZr]e_Q!&^[T3&5PRRdSEc=sT@:u-YHH2@J,B)mLGR<Ap;=Yp$,g!<%me14,j:?`cp$h#?gDH8U(=TCm/&TmZc(QM,H*?Uarhm@EpTbXnhnHgQo:i-lo?#aJpTIr;\\#Gfqq(_[Y2tH9pM^)nmX-X"NF0>I%ohH8AG)Lhb:AY&%n'?LRmetss]D$fd]6a@P]D(c%)iVHVUj;M(rQDg>rA%XVin&,;S"C(pbF>uoh:8Pb3hj)*e7crTq#%o*_m?gj%m[o",re#Jq>7Rf#hn4A'4@_V"4ahhSdak?LBE%Vlqn!ZJ5/^NUn`cMZDdN^O3IajQ`pZ7>`e<D#272?u.\#P=L#:^'huE97%t?^:%^B":QqlXl5>SQTCf&-3):8^s)XG+FagdA1Bmr/lLIssJ^MF`kL=kl;eoDO<F[4QdA2fJ&)\\E+;rVi-ZAC7OHGLH3RNK4VZ+@#hK%#Pd,-iT_RK?[mOoZ$OXnU%O\9X8a[Lr#bKjc;upklh.uXl"V*&la!_;eZ"6sj"t)u-u9jcQ!qu\N8o"CN/3<nbOmpUis%@/gF`p9%/*g.OpADbq*up*Qpqo><YfCUo/q[i2o.Kn4[%X73]O#aa$'aam!PWQCY*W;&Q:BsQB*B#a,fdj9>n>!<X^iKJJejaX5b\[Idd&G)%9\ZS?1P?Um<4;+&R.mX]I\$2k!&9B/\P*&CY3-ZIT>oi9(#AFq?.\CN>n;Xk1B15T[U$*&>SJO&gr;]F'spJJ-\In!;X5[.-CmMb%<Cn^:g:":8FPMo`,ak"bGnToj0U^!;?*?S6_*!T!58Jqnf;l"(e[k*&X:7=QlQY`CCmP*,Q$>(8I4goA.(C%FSYO`OJ:Qr/e(YB.%7/f.lSTuop*:$Y'&hqO9Ym?-0].Mc^]aB/jL@s:3?4jO`QEBr!20a7#4.'kgP-?^1?!(p\3opF%#e1d`p9[ZV0aS(+]UknRJG,b>%9`K*>Y)h]&Aa6N=AH^h>"^MY,afm:,L?h-]W(Slc60i5GYTuQnIGApfriKF+QIX[qio);4o;t^#/;I&JQ*m3#3BOlCRGk^_cUj2g%#Juj'8jiDQ@'fd9QJu7)T`;A<\k7]c&B]sPoeDIs".Njb"eUed4(ac2/Yc!R0M7tte^4Zs/JD/kH$%MX9%F\sc6=">Y-LtbRDM!,%f>B^4+7;RRN#j>Y+:8e0Ee*0ciM9r-A/,X.^)5),Xu_[TXmIM*4a-$?/15pU0X<+e0U@GM6I-k)'c7),TEAGQ9&k#,]48.S)cYb;%EX;L(]#"*^82UjWMP:TYNC7A4am+mr-&D&\["2mmVV9KW(R`d/5V1Y1qfk7>R30=WAI#HW3mGOklW!]HfQ:Qp?\up%bK%e@'A;P;%jfB#<fOYEU/.HIOo%126X*-%ie-V&+PRV=)*P9]F4rlS@A?Lj$Cs#rWD21$FmBN`BV5@[.<SGaMdkLiG>Yep9<'JH^m%_@lS)kJ6%Q(oNgQ3$=QhH=K02m&SC2b`i*ZINoqi6\6Q<P1qm6Y,Mem"tO+m%5j9(-R\uE4l^:#u/Y(^5;=s$BGbcjBUMd-9YZS%?B0f-,V/t%_/[pHe3$"q8VGg))R1V&Fjqs-.;&-LRDlVe^,a65M_or5G4;'hWaUO-P8f<OD8ig(5+G;SqT$M\%[of<lmb*nhHEBfaWiblS7\KN%OG'&L3Pl,6@rBn4KKRpHQ9<VE>)'Cm$'dJJP4a':1eoYF2eK_EWAr-bDOJ!3HlPh6r&2[DpSSB]$S0$Z[dHKLfd*tA]6+Z1EmfnX%pX?eqj_/$Wqk7DAMGCSogT]kS.1W''^46AYKpW?S'KVmUX,oc<p#o@8C_C-;ZVt8DYkrfQNNs%LS8*@hY/3D)e@grHq!IA:"dJC>%j<0bJ@ZqOq+.MYcAQm\HgSI0TaMQ'C9^W0.:\#kKDOG+-Y"W:?F\`l`4H(b@@tAs7/Ifqog1U[nm:+es0bcd:!f#`W13IZV%`4>[%9$2OKg*g_gCHF%PauCfNl`Zkc&5GWW.L*c>+p/TlKh7;HrE>#k6`c0*!_q6HF'3H'aul$,jLY8:**<d:DQ,Z^T[43CFE_DXgZ3n;%+J=C;%r;\+J05hs=+rpf;j?C6&p6jE;FGLeQG*"%/\@Q9UN$]9qA>-(]q_+I$Gs#d+:9ul[4IS?>HF\:N1u7u9T*MrD8qhZJrGna%::CDeK-n_pg%`Gn(bQF.!V9't#m]5aUM(Fd0lPc:oLR_,k=CR`ZF^n=0%m"03V5:qooP.[e!6\!2%\e,i<G^kYSmG0CptBS8C6R=%.!"7jbeD9*frh_mdsDa&C2LIcAC@b#s)k(mo$uEM67==`S_us>@9+ODPoGubMs.cn\!WPUo!oa=8)8,VG6V&>@DLWF0L6_Uo=)"/%4r+%BKT#ASJ?S&KgmBbUQ6n^ja]/(F&S60kPL5dqD@3]$.SVBK/dF56Oa/[Cg+l^ZA.]uq$tC$KWkg6\4!0A0Y-+m_H?)00KBnSu%RE0kGC=M!:eR1"Y/'%KK/VQ&+7r)Y?mC[91dDk1XIbDLlG+%i:\j0"Ce'Z#Ti(`)'[U8)nFA2;KiW1`=d$l)YNC>Z2."[A5m*QTi%;62`CLIPa/<0=:k%.D&9=Rl6T(I*dV3%qe0PY)#?DJ7,?;<hb%XC`iY@WR*@/Aagb"]`2BH\b"&SE?PfJYISF!>$q&MqiCm0c^-L%,'O(:'iV;I1e3[l&MRA[K+C)gGfGdR'h5-E>6FKrcEridQVOQ#i5d'=,ubH`mtWA/bG)%/T*kH2;^8mA=s]u#H<?DmVF(<q;8^=+%iTa?pcHBllKiT^A="1)RS`kHrm:^SF\Q(!qfIk(=:opJEI8rR`]DB[-Uo:W:.D';>6B-C6W>TeDV.<+.5ihdN1/?Ap+Vtt@G<"gc%JnM$+9bB!%%9OB=UMV"j;KuP:Yu!tEJ8h)RB"%6Wis_HuYuR.28[!P1$Z;9q?Zt&'UopoV?US[pGno"+S)&LG.DS<X`57%ghC/aX%B<L&d$gufN_9RD64%*?;/%;)A)CaZ\@BROC7@:PIB_0tOYi+C$Go=E^1EG4JY:?h69j1<`jL5M"rCJ<lZC+S;Y6-`iNbp\/3q(DX%ZAe)h#Lt8Y9kTg=:+e`YT1NpJ\H/lf6lG=8jK(:E&g`%shC6RmgEO]l/5]tKP$d?-+,erJg>88m*J_^m?p^0-Y^;Df2B&mNgBNe:%n#qjL8Lae`r`J?GjV-%a`E8;"lccG(EnCf#+pIS8h24*l=IodFC;;q[9?W/QRagg&1IVPuQ\>f)l"!<U\2>3,7M`W'0kM$M<CG'O%ECH`AQ7^rt"-ZJL>]WHKF<bc]cEb@Q1sFL9"N-/'pLn/W\'N-p-%CkTAB#diL#$F[6BD[XD*h>Xfr:jJ&3=$L8o`im@%>Em$Iteo%b(#h4S;Ndkm'rLmeTL&0?X5u<k&O$l,];t$&i&eN=G=%!"ecp#`QWJ1bI6A+h4RGoDnHg5KB_OKe5EbEJoYW'\[d7!1#YEL47Mnl%XDU9YNeL2KMd6+=.X^$%#;pFfX/3EHqA._Vm7n`-6,MAd2=@Pij^j-?IV7+VBWt:08@^<m&OgcuN1Ja9abl=P2AbUg/nVh@'.>AH%k@e]`eHN1mhD#Q/.Tipg=RSP2.k!Ph[>Z9b#I)ESXfX@Sg=@$QJYUn$@r;ZrU:Mr%d2H4i6Te>S^$N<hgiU8dl?Z-9ZD\O^\baL[%YdgW46Ti@ik08s1[F[bj*;6)2lS$W#MqO1R[)TiJ6\:=Y*S###mYD$mlI7eUQnIg_d'4RcgKW2IZ,f'uND;Fs[6SqVcS:GD_qK!0%=K4e=e$2js5$%Va9B.E#GHAjD*3B^)q"BHVKrR8"`_h7FkPJejeDY8*,2"6AfpkTuPN<_F`Q`_GnuK/;bUHJ5-672BQ,!PN=/5Ic%Wt)$J]@C#=q9"t(%ph3[Ob=&$+)T7V&sDJ"'5PY&?'Y[!.C!cMOYH8_<abF-m(L<=^b`n^/ABm"c4Ue$YkYdU[p"@1DOsRq\.ojF%R?uo:Y$-Amfg$_dN6T]=g1Z-U<a=sD\^k>\RT75t\1FMXj$LrV!!<ToCdA^#Mk0!gS3Ee&fsGoVW>iSmi,@FF.00q2E"j)dp#C,L%f&VV4q38=5U.qf5ZKJ&2?pX,J$%OpSh6kp9T)d9Ca(qHLhV&MVl-grH&l)Pl4lNIg)&5nP&nU&"-/$bBe\U1f=ltRC^-WQ#\1VUW%SRhHVJ0>cB6@&kFZZ"`l+q`4Fbclr#flr#N=k2s\G1fGFf7q(GZMW(ZeY[\7Tg-LOM=a$^eQ^k;:ma35o93C&'&&>d.7!=Y#rGtt%`lX2<Xn6F;:ebr59D<@c=%=L)iR"YGm`LjC^e4Y<,ItH7GR7Qo3+uTXBkIZ382IAXj2[a%+b`Ne$TgkZK38Pgm$7O@PO'R*mPKsH%BnfX!YWm2tTg^kGcUg=Q7c6i+BMKeBW'+#t$H>,FBi,,Q60Z8r3\BXTO*RasctZG(FiRn@XlY8DW)"Vr[fboB>4R$Q`\XB)\E#04%i/^]UC\kYS8CqenP,g^Z,Sud%YQX";HjSi>`YtYN]L1u^Z>JmA230@j#_!6U/qr=%,?^6iaQ"Q:Y8i?T8>iWGEFF&Of_LGnPmt1o%oYd;1257n@Mf9='ih#d_[VSHD'N,q4bfBq_]]20ic=:gTg-*=?$`khCbU;3+1W`U,i![)>9eq^Wf!oaCYm643]Yt`+4<4fVGJUYM%qQaYDb$HOAVrSi`d$b*lYBQd6+V2i)cdeVQSsKbmW<&_L4Z)tOH?/l]=ucnAC)K]?MX!AVNLL)LG+906OR<smgQl>.\';;Gr'Vd!%D9h+r8K:PY72K`INn5$HEE-E&FO<e'a"ejq-XAPBXtgCE"k#i'4bekaN^VPff[/YnU("88[V#*XoOr(q3:LndUgk[h7_1"PUl.][%OM0&rOiJ^D$cbe7&GOFl2&R`=BV22Kd@T`a6`:RahW^'b7q^"JB,@.oP>]55bit7WE46hQI=%L.*pQ-f=$t?+4;'r]FBnH?:$g#;%%u"7b1):I-gSTG,E)fUVpfDV,\j't^7qOm;>n/)A<3HKQQeN+8.32ST<ZB4u8fHA[YW_)iBriI$f,-E2)I\ep%ihY4mY!L/9s_ag%C6qd7H5fh9&]b(UYPle&I4#9dFS.W6_$82&]V`\KM+CZ!(M%5d#uO2n(`/!=4:/8ap6?2mAGeL/kpNJDhYgr^>T`fA-8?M3fRW6j%P=nYr@[^nPh8Lk@Xh;R)8F5tpKto%]<CgEdHA09aY?/$JV/OhufV*.=ShP5U6:W278>n:X]l8[\C`K,aOY%j.-aK048/mO9>+SVZ%+a6u.9QGJ+N(2ir;7Nr1^noM\a4b2E@<O].>!V5L:`mc9Q.n%<:8*^;*SAmX11U!%=o/P9_^T^V1(JsI77Mt*1i3\q\FHIsE?iq$%LU>I[h<8rY51k'aW7(qQ/R61$aG(G`3Z4K?e'^,h\j,(oc`nBclBNYI6ug*eP>9n$aRfT1ZU<t$'2dP$GT)#58rHW'eIJg`5D5[(%7&OQVG!d>ps)7*Qj<m]?:4G%8_XH:?e^:mE(%,5Q_8u!^\eVbg':*Ok^;!,B$b,FNn"o*:`LQ\9?I,/WinJS$pAG$84@>-[g]^3^%Y4=\.G,\W!_lZf-%'qqCKjc`n/hk425`l[^BBKn8OL#MQ"%:\H.SReXKG>nkD-"oka/bsITeF0>=#1PP6WNLkHYo>TS(,&qUWkV:%:m;Ks565qpRPc0`5]"g:=<*+i[LR%48rsI,e!QjNW=]>ugX&j,$%<(eMHsYV!W9&D:NS?sDp_>PW'q5U)7fj#l/g^3*\.-RVo#FM%!;<BsRlB9c:HPpE(cb_kJZ#Zl+.HSiAeBi>do^aXMJ?3K/?W`Fp1Ais"U0qi0]m@5q?[fVn3/MC!40/CoBn:Lj7F4_SZqX'WtCAM%V<P*$S.0`tDime><VB/>%eGfP?mT,!\Ft"Fo@Suf?>^Q5n#mW#"I2Rcf\tB.?luI09LU<s_E3\\6&,PE]&;r%lgG7s-J5&D_<efO%<J=9aZNr22!'piL$"ef1G/lt^af`$7?6,$lNG77cr3D<k$$tbc%1_UO%[)n3ln$N&i'fNXlo`K=gD<_3pI2:AI<UQZ'Tia?:b:Kq%),h7A=a=W3oTU%E/g:@?7@Gu6C=4D&QukM$Eqh)m*d[jUjmj]"?ZbUiQreIpnCj*qmU=:*IY^OLmP,(["Z*,fHQHRmKH_gCdR]#T%^bIE2r$!/s*@I:qJ9\jCAmSZn3D/<7kg2)ti2r1Q=X6-'lY)jl9LDRS6[k?%O`[q^C(;RWB2P_meTb(hnQi<gdSA)Z9s:uJo/;KU%SRJ:`G*<U&G\rQmnRkrV[p@*"f?t[W%_P#m:NY8Y)prjmO=8kp)f,XD^dM-1Q2&'9qr[1"S-ec.!LPRM)'O==7N9!;=YXQOKVFgs%BQ04J9bX!jp=3KSW'5p[<iUZ`)U?3j=#18lL[>@-8.HJ])()t0K<Q(RD4C3/lHpMajClP=)FROh&iL&JnhqB0L(I,?6#]'\?gVjB%>p<N-@`q*:a</F:riKF4Vnkcfg]g82l/?PB]K2L5Pq98ILmfp3E^e8TAHo[^l<3JT$*q\ok?o.ZE#;UtM]+"JDhK$%h-XZ+(AJ<9%NFRMW"!l\R(sta,RMnSBLXCRQ]e-I4JFr0/VRX1XRCcqU)(+0i)!Fcj5ZtM]k0S]j(L^eu50%HNqG=(*%c9j+0\Fhu7+"aTJpA9!%!eV%Ofg$m_0^pG<+=E%Cg/`5Ne&DeL=Ku^&m,mZ%j^'dHb?C_U@s*pFb8NXLci?ZH"VG)T3)YdsD;6WK+h)PP:ZbZgTlr+lR6`aB%ZSUTS<^TX[EDpoif'ul(6pPr7bK9-^2>3d06oR/:E%&Xa]jT&9HL&B:YG&9b^5ta33&0G+%$$qlH_8#`Qk(mbFhBXL`a\480msa0%WK&Qh&@9fOL2^3'8);YZ%:ZjRKkJ4P_@8[Y204NC[6dZgqI0UO5,g#Pk=BG<[@KsR'D2Q6iNZ?6<F]CP/c2gq[D-i(8gB#7HS^Z-%eM16gQl4:dhTQF0Ypl4[K[bRlB8#3f9;C?$1u0L:J()ZMgBJ/D#,5h?bo\Y'm<dBA6ikt[Y/iakUL7slo[dhbhBQfCe0@(gcn)]I%'aF8<jW=<u=tIj/+]p,Z;;XW(!2u0Eoe])*m"<Vq*VQ7B(N]<L)Ha-BjIr/:"PY%5E$iDDZe.%Ncb3d7Zm2lIYg$c2(]Da!$G;^5%cuG$)@N(sGLr)&.diCBZhVJfH\=K.]YQ^[]&P>t(,IFtR+Ejo=M)I9;RndHKD[,W>__ea;!tJZT(RQc$+-A4Cne*L>j1/@AoR'p5%[-H"7@[J2`UkMlP[=YneFqNCOa/E.^W`OA[Z_D0@qs/NWNB9,l>]L(5Sf@**L*c!/S,<3ONa7(JTf2H^44V?`4'+"u6)ekth)-f(%W4AB]&.T7(X5dSOTWfP(`SVR]%W3/!V7Yu=1Q-qUUP?V8DZp=4]^Qpq$A[`PPN\CoNk5Ce3:G+n6#Pi,)cW8Yo#?meS%KW8R3uoL%Bau?`\YHcfS`@-*<"iJ@SPN['b=f<Kf]^U$Aj*_HLKT]+ggQ_rRspFI%!HM`bA3DJh<7lR`]:UnKe&^ll`Tjak17)U[In3Mf2VW_%BW5F8AM)G8(J"83m]FGV[FDDiPEm-<>gcQsZ'qf*P/-N0V_h#pI3jj(gmoCpl2K_OE4W3*`LO(g*EHC<C=9#<6o\VKpj;4YS+Prs%&12h:8;&LE/e.Vn?;,[X2O\BFNr.fbNRssjKoqkmT4&/+HYODBl!>5sDRt>kGg1G3_oY674(\1'.:<a8P^6Mb;O`TC1K+&n3fPN=%Tl&T`EAo.e5M]JZ+4\0,hhnS4mbX\-CO!\ZWnF/TFfIX9cl^@g8;CaNj@I26G'RKYH4nGMM#=CP&:m3/cJ;pu+Y%;t\+Ci`kkag5%AoB2*(W5!"f=UOfkr#]VU#"VKA9NH/"04%6\pj?tm?.Z6$mR/eW*nUEWBk;^T^H_+DOkse6\H:1,HS6V2oX;c9%[UcT<N(k"DkJi%k0S/#@Z"3Af?WLC5QFdP[\ktWj6PtX:2pRkj0?'I&QYq]2stA;;7f0sZP-p!h=`F,)bl;a^kI#eQoq2MSM%k>BVu5X399[#*,^,;%LW?(P*o<T-JfNu8SPhZ?[1VIb)J?M%HZJhHpZWq*:Al+)j\ZN#+_m5DpfbVWfQ>1.kqjjIN$!.)e"hN`%l^2n8HE`jf#9VERM85)%6.N.!Q4+&,9%C.V5\6=!ffQRLS2HNT>+TD%W5i#O`10Jj"&)b:M*qUS@IEYDr\GBBk1*?E"T8^'pDWV^lj=uW[S738Ro-;!J%R83%JIVu*,7(0alWUd^,_JYfh0cuR2(fD1f9i3eeGpE;8YuS?]/A;&<9U#j#;I.Mqm/<*3jcma/jk$=-\fV4;C3\-;Ka@s;UuC^6RF)s%HFt;]U;7FD^)9Le:*c<KlPue(SiRc1&a!5^\[YD#Z&+0cq0<flKVZe1a)Q/$D\H9jUP[Gto^VJ(gjO":C;FsEe"$@*/Ptf6hql]C%&\\a5UPQ7H#1K8gmD/@M!AVRRb,I(F\2o[K0>UA$2%^n6!C;kqq-;/FGM,Wf<(h&4>ru`IRWdU-)\",N/6o#P>GoidE0$B%BYJ7u%YTVP"JC*X:^i=*H5S6cOH8JKcB;;H[0mLBd0=VWH$E0mQ2?'j1gWb2I8iahWXM[e:1g%+Y-?2E+*b7UdiSg"1<b#N=ID?o4RmK%T%7Fk0K,T(j8fq5`CYHFM'=tMLV)hX&BXWDFcg`(Yl^3i\^^pC(QkHJTpCb+9&ED_%m_Spg<G+Y0l>X4`1-7L.u!\j:Jd%tX6G=s]3%e"_&/_$pR$5F*Tt=6)2K_cXA0DMmkjWCBV3]BP"3'%=^K,87H]HF*@X.=ZZ([(41D)L=*<7r)LIU-`%=om3bdY_tua`8fK9nLoUH%bPm1X22CR*2[Z562O^nH_ePpTg)fak5*7(rKhcNoW6g(R\]JBuKl3Z9NFZ=m`g.582:3>$`GI4)[2W-`9>G3t?%8_+<ND8;[U^[8%;3+4ZJ;2f<2EI5Bf(Q0H3klSTrAD#BFM64l*4NU1C`"*!Qu_R0B=h?_TKUh]MnZs1]tpQplit5k_7$h_(#5VPNF@B@[]Y!=3Td3R%k26\@QqqQNU+[(s_Mq3QTPp$'?%4FAf*tL>I3Tc,HJ_7KVB70C&s_+%b.LOonfU_&UI4=tno9BmL&:L=6QfbMGRXnFE15J;h'R%M%?:>hlH),Xdba6lQfD6;r-2SKV![eCpcg7o-qA0EYf3dhon_<D%@i`^tNK'>eI3iTE7i!;]cI1X,EGU%Lq<`6Dh5(%4/fqO-/AhtQ%3O3D+.MhWc]8Ho^A4VL>]<eKHUWR]bG5L>TRuX[O%`2;D3lDZY:,B1ABrK%cNpQh%CC=G4YdP#VAMeg^(bhHoU,NoN<"B(!UF(bi%"m'p4aJipMG6.dcF*Jm4]]Pl/2o"Zo*"J'V?2F"gr<kQ6C5Ef;5YD0<CReST3EG`u]2.,cE$F1^.`U`5VB3Vkc7o!\Vdc/[mSoj+%]FhrSB$8PA1;"`0PmerE<@+3>TrR1?Zo]L_+n_T?WND9fGIV+*arh6ni$)9VoXkGZ@B&G+-_r\5YXiMT4l/*,`qf!i_(_hiB@'>P%ar+GOHS/R\W<-_::9)H"?5lTJbmUA(6MO)sMO6KRYsKRq6C$H*c5*+&Uh04D,9H.nh6U7_:_k;"MKI!%HWE:0)@mQ`<Rcim,#u(h%C@#/Wa?gV$A[!&O$lFob!?foZ:Hi2<<Z1c5N;PQI0%A$B`l!o_(iaVm0LgF1.@0194BVR3_dWc=>tOF'RTQ[hMcfV"ef7<p[>=gB%AT%FqYZi*UKfu5pS%5p]]"?(G8g8A#\*k[>DBbs`Bm)[$%sXHa)Bn)f`42Bo;AK+=Nu]E*G!_pq@<6q'L<!'1lZ1VfnaKXo[rTdk%WIuJ1g79pT+.Fic4!SN/0F1U#h:<X_X7i6`1kEA5rOJN;2'@.t7Fe@<7NOMtrFi7:WubXW26R^PH94W4n+6K<Z:>SWX5saNc<&"'%S=HdF1Pe%u/SD;/^2D6Sj;r18$p=]6o@\?kk2n2d%$Ae9kS[!^YL(b!(YrY1DE^D5B))]q]B_t"A$3q2+tWT/Y_\3t8,Eu:*KTnM%(d$U@;_WC-fr&6E*j#mk1+#h^E.H$''f<uSiQ.G&m/iTi^I5gB'(2t.A#YS=kn4NnBd3)_SgGEfm#s'lY+Nd*."]Z+g/oUpplSf&%GsRTD1OVf7Ds$pf0$h0Q\Jm;R8FDofXlTo[N#roa&c'Ym;4S"]da'$2bUFSU1P95n5\:R!5C\aGEk9bR/)af!71+7q&<X[Q^#kHo%SHnPMiu."T>KC%+UMY%<:`r*c)PMD-bXmru"d-EM!X^-l8ObGQV\I.tUU>6E\UhWJHHI3ojH@ciR',1sKnhTB(Qfq%1)uG>[R[BN%nK^H^k`01@jI#Y27'qq:EtPsn,Lm@9_]pH>iU*lgbLA?Y&M%hC*'t?<&@mNDoH8/e;2@R"/tu0sjGs^5kj]R&`q2i$RWELT8"OdZ%:lGN[%.cSbjLb,->NFd]0\R(QE_hRLLd[gK_[spV.FoZ*HW!O*I[dSUOXua3mI8j#e<I$HKUeH7a[mMp<lq<\3EaK"*3!/a8KA[T%)q[/S,>Cn$7U_rIBc;7WP987]&P:Fi=A>7(hg3^-noEm%)-YCJ`$A)PmRNtT\Ts#hEg'"@Ch*RBpt3;Fa.eFR,+t26g$onhmh<po%W_n:_hk(t#T$`XO@H21L8CIQMi+h=CUqkNp2`jS_gEeMNpIA^':kUl![S)KS9k>Ln=X2`K[gPWXqFap[O-Hu#eqBh5XVlsgfuK]O%_Q9V?;/Ag3]*+&eeJrtVV<0$ZIPltEm6#G=Ks*u2;VhJh!"?0_V%gT-\P%4?Gj\J(7^niSVc7_dYk<jjPCi`HQE9M2*?3@NGGZEB%nM6n$@Eb,s7:jB)2+8g2B&B4TV'aE^I9.(o17rgf9nmri9i0$n<kI417sIZ(Lr);dk'W';KcCg?ll=QVM>6c2F[k]jrLIAR#[U<e%:VjW)`h-["QjDX;]2Kt4B0RoDOhs*<G9^aM]JPP:rUJ;e;]<\LZNQD*G`GXV&P8<6r\edQ;uCLpCQA2E9_FqG[p<p0U=A`@d84eH%>$cdVEtG)e@GQX;*rYcFfojn@ee.Csb1tRLrci>H#l'@a!u,>ce>(&\7-"V0mBPqYn=gHHd--I"O^$:@jsC(U`'FC>_7VPQPSqCi%I=Hu_[?=h>5U,KJnX(4!66O@^XV:c,+C^A64!5tKQ17tJ/hEBI`Sf2S"-*Q7B;2TQ51`nQJr)B0fFP^L'WAf7BccU6G]bj3H$X->%)5@cqYBaGV%QkarBT7"+S5ad[20L0?-o'+!f!n4b4?ZXIhBV>]%#`3<&bB68#M*=?KoZuZXOCcrVp<)h&]St'.4Cjm7r,.^e>HAs%lO^WM3c5n+#Kre>Yj$QYmP&4)X$YiQj48d)qZ4A[D^T,"$$5;Ge)Rj`m+"\i!Qlc9i\80/O\0dW2ItNF)J'niXuDYG]^slWm`UV`%`iu^'hW)#k*9Lk-qbqN:hKR,V=Um3u(BKGKJ.ZSa?jsHX`&.p]DLT:3NqI(FJIsB?PuQj2Rd#.JplrDq'OeEGlnGRMEmiH.XLqR6%Fr^JadUHRAW#>;n-Ede??JjOQDN!9(8`qi[@rpf74/c;GY%;X7QJ:0!oBiZqdu-h6N#@uMD44Y\3F6>;]agpFMlDN$1%T6,R\`WB%X@Y)_,I$'o:Q$*n.6\WRENRX0)P7GZ<%&Sd]-!>q_iq^KRS5sNP+BKua.[+qU+f[TBlt%c(bFaGk0;1*fF]Lf>$n&T0\DUm)$\i(%2+FVZci[T?bb\W);b`6`)=NGM8^je<]PC-;N-E7b"q+tdS"Q9*LTE$3]OlX2nCilIoH?G?4\GRhY_\I&_Aa18m=d;D836$M:iLU-%h-asPTf$te<\DMW_,7^qf>B,*n9WT).J,Y\b,$d.Ge"ONJoe"_QWfP!h?'=TF:DS;U0YJ:NaafWR%XQ.U=\*V]U$qr(Fcu>[Hr\3%MeRjd(ucZ3LAWB,1,LrsP9Ik9QjbjtouN6U*j++/h"]mSEO*ufD`hkdl'"ot9D[Pp7`-phjeP\d8*b@,j%Boq4XKu;ghh(W`n_uB%B&"uS,2P934QCj:[-aHc!C4$R-ib[F>`(QLjdJ=$aYOfY'SU$Fm\iKgX5nF`O$Yggbq5Y$dPMc6"SlUu+f(qfUCbitGi@*[I<\N8%f\,X[;Oc;oUcYi"JK$qnSW_5*r.f@2Q7:[II65*Eh:WC/TgX1U-4f7$S:N29FD#to*q:*QP=KX_Y4Qu+A9$-F2cH_1ao/2Zcj8_q%T8kgg7TGgY@qK3%U"obD%dhO_YL1@NIZLcoOnP6k(ocV/e4+2j);UEYF%0Z8QCC_j4^K(eCSd;%:T5`FbG@7hgmY5sEGMMi(HtQ2%m;UcE>U.LtlHicb4N8+@g;BTh;m]9_b7p5*$>r>\oOprNnp='Ei(/iZ6seZ,;FJLsM'Q5/JOncH/1"e][S_ug6I?7*WSj+,Q?]Q[%Z"+8s/0nBT2,iFU=A?rfb<!VuiaZ)O.#9_-AoK07,)EVpcA5he.M2l48dbu[!JdA&_M[s>$nLcCEtP6MG`!&iX$270J3f(V-QMsb%Tr7;\$5!UY"%<h7'1To;O4WbPLeaU6j':UQ#7C&1Kaib3Ku/DPm[B=q<e-6+=t-XS`[g=d5$Fr"5;USb',q+*LF%s]+CVWTDMmHh%mJ:VBSJ5!;G"a6C)c`;^DH%qIo_l1"1,M'fA.$3aX")"r1`;b<pX^=W7CCp:JW8%SHI\#%"A9srDOjXPT^Ak@[MY-f[Qa@AZ[518%L39(o#K;Ib@+JIrYP08nmI_@hSG)dfH;8g8#!M_ZH(9W?b9FVD4_geIL?C-9(\P6cCq9#<ooir`G>o3MnF*;$7cEFm.HC5ppZHVF%arN?3R=b`"8i]%`W>T5G5fQ8`oDlj"HefnRNBTkt5s\[XKu0M=5tB>IiMWCukZB-K(FqudY/85E;:%I0o7U:5W/+Je7jtpT]Y5)t%dLdC8\un+*BsA5"N3p#PKV;Y*=$LiSFT/2@RR%"nHX91B\SIaGCuZcrRQ0:F88j@[#L[N7:4hpi*`#)e;T<"<Iad>bE0_C[P/5'S%5a(DEL4#e#R\:nCUuAUTFYb49;Ch.=g/)NT:P8ue(JpK;`9L0TE.mj[LiA%H>l6KIPC's^Ou:*,@O8"8<5qOV]GO(N7XQ"@BLWsY%7;,0'(e&-3=H-m,W)RFJ<+1]lOf5M'>)S/LO`hBa[R_>\((@=Aa(t!?,Kh9splmY6.$ch:eL6kGC0a7bEQ"JH1i^I5;$:s$ePB&3%M214kZ(I!5NO'!j/E-X22S+kr64oo_aD+nG5n-8Y8DbJjSVB#-Pa'@UT,F7@TqtG3%kXUXjTmH7\EN94_P\XJQ(*'W.s9GScR;n*%G_6A[e<cO[6?A!_,D;DN5=0d>MaTrenT9gL_FP4IlRR2%?s'.F7)RH16o6I6?:X*.MS5%FOCGCT['l?H#m0@BH7X[pTZ3r#'H/V`%4j+0p.1!t[j(B?I5piMG]NY/(UQo.-nTK&Xja1s%7d'pe'%L'l*EHf(@7L(FhL_oU=:=gLlDW4TDd]XYmfpF1AZPqMlGZm(*b?l*%3T:Y=]U8sAr?53_[ELqR=`PAH9tN0J;3C_@a(M1@NAF<&5j^rY#EP$_H3S(B_!>1]iJ+Xpo_tM[QUhD7"SZ[`4m!],P-l@o#RYJ=%7^0'O6R?o8oe!]7jdJHQlcU)J]+iDu`[SQQ'i`3!>'qOFY/>!A&aa/WAZCBkkd#&V37#\m/;]J$R`*?3P!mPXP!nO(2MrWe]?HQE%/sl[J)ClPu)BLHRdB8&NHNc2<lsp_'<Dc/j*c9\7FH,f;XDAJ[UbL<-h%$Uo0HA`b"^?"cZ3XhOD7+,H;a_Ml=PKVSEo#IDD/=I?%n[9g9n@rX6WiG#o)PMbVn:6eaaYQUkfek+pDNAp]#L#t3,]4I!QJs9i5+GuLUX%9@?sIh?DY^9g*F-QL>l^q:V.pkfo9eCA02^e0%^Vp85;cB*H^C=16+/57^Ur-s[S1sjn<bY!'A#[kiRm,`-.=:,7_a:I*k+dq&"`KEuQdp>%(1nT<7\duGXu4SW2./!5^==.1Xsj_n%eu]]6Fc@;NEQ78SEQq^+g.O4a'VDNDKat3s`jB#_Ut$H*U(jZ1&(53knI_od'=4^%?(gnI4B3Ph<t[4N_Q#D/Rgs#Q0"s\TaQ-)g%=E8js.s$KaoojPs>Z5n\*Sr,X*jSDeCn:.ZVYBe`Q2t;D8&pFKK!hg/(_rD,q"Ei:IuZrNCTo`+Ze;oT5fCiS4C3&U76V&U2'K#d%)V!l82%?b]g<MQBHpgeq"lm[+$Wr0L*S)QjfGbJ!l.Z?C,$'FPA&.hj<>&S[X!5:Bc1l`R@1<WJR,bEl?MO*Lhh<[Z7LO<^T-"QF%W>aUJ2i%r4lS_l<+Z?RiCIEZi5'jkaM`5+VMl:a1`"pf2Z/W`NlW,_0Gkf6WmA^VsL2YP=!25L8JuhFLIS-]hNPfGkF489_G5Ddg%3/hR*)E3;>_a2`dO*%KhDpZ:!a<2.b/@Mu-b';.)h!DAD]%Kc.fH"r*:N"b979R>kqeb*Bc&nWq&8EQXr%1fcSBTgXqnScH2n<5P%8fdVZq&?\DQ9#`;#"6%DUgYEG+s^4i3A!u/>,,"lHKG7]\c185#bi@$]G&mCR,<1)4Ef-Fg`nV3CFp[T1+Z.=3jjn(CL1\i&=CS_%kB^;6Ro#iVkR<dR9$TjW0fj25AXf&.fc;fYCJYgU#P+Ef+F?cahTDi_`H5P*gM7[<-O[<inkjnmOuAb5au_O5Vp#MHO$jq8(a?3M%XCW]Bll.Kl3ttLNRW_V/@A;2W/oWYLEu:BZ'k;J=cq_KjF"?_[Xhu*LR&87b[9(AK,qk;pmoajoks#ZgCAPt,!8\QsE_]iN=krc_%k#aRS5^!#C(@Ns]:%h+>,^P.0g%0B4O/VSJCJK'O[EG/9L0tRiAj>dMLWHXG7_p/q0`(4kZ]sO=T9@]4)"rN*h<22"V53DQMt^C/%;]p=10`+)//s+@K'XtIi*p.@3+Ir.+A2n$XE*ZYE)KoS^1=Q#4`Li_HjbWf\R47,:=f?*"i/"n`<EpW18&RQnTLEQ6mQ/[48g3r1%PFnTYYMMA^qXLfB1FONKJ<NE#Z#,tYls;hc8#S^B!Q-;rHVrJhf6Sk$BQ_Ir,&H&j6sGX6RYDj5Yl.G;18sV%>5"^1M^^uP]a=/4%lPnHo!"2ao@'s+kZ&E]q=pgLI+dd,KSl$"T6>d,@pi3J^>pWl<_>)R%;2a.TTFjr+@i/CQWoK)s1q6gk$k>c,8P9(O)SrFZ8H\t0%BFkWefa3Z%1t]G`N>=%n(=?j#">%j1W8W^'?k>7Y6&4%HU,AgNhKFl/lh!ZKG&-A(6M*a;OJJdC42h&#!TiZdf5t&9M)Bee)g!"c%*<\.nm:GA]17B?j]t1DZdBs+q7^lIC5sLTN>jPjAqE\\6(PU<K\%siR74[T2Jq%R;<i)GP#h+6]%K.bW,@?]JVCF4b<+a+l`<Q&5%33n?*o?mIoWV9`oEZH]8b"[rG__eWZT[dcpAD1m.l`GJMS0QG'?:kT//Hkkr6ho$P7A"Kk$aZ<^n27HHP9,u8#kY&aLI4NRJ3sbj%,YLV^K$WN$#]$K/-2RV0(H6$,.Dnok=2>A^%0-kboajOFX!%CR-%V6g1A>oAc2L.Vb#HUp*F>*"q[.2A'Q^UCE6$Qt]jO6h3.&)Z%Ddi=nRg]0P0arjYO\>JhOV/8I;IpWF_hdInL<5JkNKd7A9%p_gk'TF=b>an`f0CS6lGKI0</>\S<g+-s6Q!pRet&tUAh")CS&%J!%F5dYF9nm.3bbpDennB&37rH]r+1VY6.ta7rHrU_n\*k[(rQ$QEF201=7rHui1]PHEBuiJS=`i^os#3*`<lmeLdTZGk?q;nR90g"M%X2_/VM\hJTjPjK)m#BORqJ3KDDb72DH;e'RbLKDo+>2+SO+JOB)T:gp225[u(G-UsL1RI$W,V,8]j1_%o_g:I=^XF`pFn/9?*8,+%WmR\2gXt;tA=>*9??B\0Y!1t4+2S$0H##'?UE&8d2+gl<4()g.\k/CgLffk0PG5s1UT'9BECBJ',u$@6+M?44I?T\[&RgBi/qDCO%.8$V.gDr0,c5edl?T;d%0D@CX(=mGG@=6(ae_*8G$tkLDq(V!,4*cW?iT).#VQp_@i5PbPNVg-T_E$?>>J_0]RAkI-:[($+BaA(!%ARD!E#Xti";UlM;R*AMZ4LiQE_3eO8gKf/93MP_QLXjCB4UO/Ce=:_TcU1]'/T#:r:dBtQb%U?VhuF3fM\?+'@qBLc1GY35]BU/M%KM*KL8Ia1E,mA:h/7D*h.WVk426T`^o$XJc7$1SnS#H+71u1+J3\=[M<E5g&b2UsA\o.Em3i$<uJIUAL3D+fiX!uhWq)d\i>KG2n%RB$_V*,":YJB/d*[<Jr@jRYLaYeFlN+7]3]"C-0X=C#la!p%R5Yl`m,!;X'L<B*M'7!+B.X4DL,'[ZqV4gl]1"!BP@]+5&A?UXls%$)R2O[qe`Ugoon;n[ep%NrW'"P!X@KGm(a@_WAM*&K16g%t7@l;LEdXT;MAmQP@Ll3jp\PMmeJRM*6&TQRqOKE8Aq`%UX#<o^Kqb%4:&tZmGK%d&Z0m:TS^sP=WQG:__hqXQ=qj^+0@7LMYF>:SpLSZ=S3Zn29&a*J%2NiJpS>Od6#"LO/d9g9LD\?)J^)%a9Ah)bL5k]%'X2ji-XrKqgp:dU@B5n%`F[_<P+6U#7[cA$*fN0CGqe[U6qi*4^E1kQR-8g2aFJI22A@L)5*oRBM0Og-R&2KMg$f2m;$GjD*bq)i%PU$ILf7&p(7RGVu2B02siFJ_$fNX_3T[q\]_B,n;hg/mE/m:Jie/hFeF1fti*UW(7L3fi!$(]bV;V<-5[9>7`SCtQLY#A/HrV5^b%X+t!)n!&SOd3/uqU/r>>7+XDUM>hL>'"rV(3h".@SJEn2r2-@J1f5FYHel`Z<\aGo%]uJkc`hZVEAp`leMo<qAL@"*H"Da$1hH@Y%.2G#a+#L>)6,L#4Nnbrh$t1i%bsjFkj,kZA*B"<oPqU](2H_39Rk,YU2Qn:(N&4X@\rJapXk6%Wd_(h[5gm<1PsWp3'bs0Y]G2_X%aLp'`e^5Lt4j#3NGXZ5VO)TnKMP!`ZRQ>pL9is]YfOl$\%:8@Zf'(N8?tu);$Em:/JrQ<f,U28u7T\ZK)-rAI#3aO71Q^!!4^&j7%-Ee"E'^u;'cF0nj+ec:UeFT2]'N+@[WITSE)CrraYK;m"'KoV=9J%>Q+UqU^@pI_q+KrZpYmO@1K)usc\ct[hGSL\qOQ`t7=Fpf"%LI!fd10c')E"K3B[>p4Fd./(nSWZho;20_?3dS/&Qs(eg49f!]%d?n=4K;QhYHX]*)#450S3r=uM-U=Ss'Kh9Vgfi',o8t1f18h5%dtHoaPU1.e;]hiRe>$qj(\**24TA9qVLd8q2\\j1j#,OmBpsj^3&,nN,XtbEU"G2M9uDdL(k,Br'!.D1Tnn[<Xc3M,6B*')CRrCI%c%KA<?=f-*f@c0(B$RLeo."hZX]LnmNbu6M_TsKK6*40u%WC98E8>38`a$lDgh]_I1'.]?ds^[18KWEp/jfZ&^uUI?O;a`O%sWcG%M0O`gp2WY4CoPGFE1WiXC0n]\iMMRAkV:f%>0if04e/fk)0l7W#+'WD]Kun2nni91X4BO7ha8stkIlS),*A`I6OU9c]e*_/]!9qE%Q^T#Q>r&=Z9h$b'W*r.ZR5dLS-_khG#/mOORWi7!bRfu(StI.,%E=O?j+7N"rf-]Ar#h#Qga,fFNSH!\-S>9>4k<(k$AZGHFW,9O%K^M2;#_KUZ+uC`hB8"8n%Yu0CUEbJ<T.7L:)^*`lh$'JsOe!V:.<5M9NcZ*0GT.Y\g`3,bdd90h;0&.ZhFd3t^->hPH5`W$.Lm\h%/ocuLG:F(IE_eu9(?ijV^J4`-LXr8DLp1X@+a&F]_6+lAE@<,Sg5nYY@%3YO-"J+_dFqu%gC(n&eO*hf[;1,"bQr&=m3VQW/Y)-o%r964B)bSXf_VTB,4f@8JWXb0i.eFO_F+p3LG,\;naF)O5D=fNk/tGmcAD=C?R:N@U_I$j&MS`_7q?l&EN)^m!;r$\=+A=Ab]J>S:%->jT0<f*jWR:"sr5\:qJ=s,[?R<*\e2OaJb==m:)Krc4J)R=t5W6&3U=NKJ6(S(bRNn=#gdQ]9DZqbF5E5Ich-l.=A8TD:Kb^R*9%@-;c=am(M';r6HSobfX#aJDJc?@mlhPj3IHqsm-q3Sg3&7>orp;88%ES:,m9A8/sgGpT57(O7-uIM]mA1O1;DrYk#C?;cscj@p(T%T2*ut&BL9nG@sjR9+ZPI1(&[Fo7g\acu,(V=P"Y!/9obJ0+R*47-_j5fd=u\M>X7B-DH$29eIi*K7'VcC9m<ROA(tdOA\dsg$1]&%9rc;==f.;@1,;Q.,Z?u%SLKG:>W4P&%E#EY)=N]1?W<'j1`ujBg,Z"*-L<rR=(e=n>fq^6oK/t8m',bO;!_oDN2r)DFMVsP>VVYL%1dI;.FFg6Cfe_*Bp:Vmb*+$[oE[FF"bW[oK#+#o\!)@+9+OETaUh2)LV_Vhhbb^+`Q9A!%"B3p=Jl02=,d>PgR#2k#,th/F6&Pjg%R$rmZL`0\.05-3hcAI')ll<3h##Bg?\q+Td@%tQ5R%r<ON81-ejJXI0C(/2Whmmt7Z8CQ$-e4SLc:<kiTNW$m=rWFe&%pAMC)Il4%Wp-Ff=GF94H<46#6i/t-VBuVcU0%UT>*`l?MN.71Q!oa`8;k`)Ym/QBT+kqS"n\Qn!#8bSYA2@UJdWEJS9G4iH&-C<c9mZD#.)r<%hT-q!_&13k)GuH34N8_--q(tH"O&]si2@BqA!BFslae=S-D`B_dDfSde[oIl4=S24ktft]_$VE]q^E1i@O;r_#&+.[bYG/8XXS0E%.qXjo[M*!1%91s\UOe(d'oX\+J[D'p/.#:K+upq6=<o<<?0F?.m4jmFkgA*l#)K%kai17"81pL<bTr2LRWp&Zf:QoDh-QIIk"^k*%1YQDh9]T3]_J,G!>6tAELm!/[h:X9q`4D:/_?ke(^m*;Yi=n:\[BV-F@CFAW(<M>2n^6E,o-mEiXh0rL6NL,%OYTl@Vrd;nE;a_t%lT#=4,o5=Cr8M69VO^VNhiR#hj>TAe=r=q)Q@_!"=lMt:Na_#(_ECp]E;_cg*4R+>b\0q=!uL?8GXlg)+eRS11eDZZACa)eR04>#%>s@(($#YgU8#$AOW2PIm%%<53oD.YhB!jK?O"ejM;*JX<,7H_)0.<&T35<^#_ED3eSN"_/QJ"J=]^=7$NLB`DfAt9eXc`R'_3J3)%.:kP@*8(R--`-ir4uQgC;>STKXXcl^Qk^Kf6("[A2,Xf^PT'n`Jm*1@dL+/7/Gb%J$=h!;)g"\&gu1)a\13Y%AO03g7m_JlZX)]0%`H"YYk$*^*UrpE]XA`#":eIi@]EM/.Dlm/hCJrjP0,'KAj"o5.;m.;)+jHk-b_o'hbe0<9PSkQa.5U!/Q<\`=39+M(es6rF=na9%%&kHk>\ha5X0$,q.KfaA?1AtX_E+WBt2TT\p4]35VMo;OqRbK'N7-3"B]S*i'+tmARRX#3\B16.D%d?]QM'g2(`SW+u?"Wk):aGg/%adEJ7;V#Dc_3BeE=0T_[@r^>Y;tli=XYP*-B^1g8.(!d4)!HULKRkk=a;<JRD%BXH;XB/g*EdZd7aeS)<&85khd'pMHL?,(ZTR3G%6uclA<.d*C]EHDOAdO+Qa<#ealD*%?9FhUBM$arP8jc$I6hSQs?A)?t-rU4h[)Va@`Hc@$'5;f]9IdG:RTsNe%!+!VP?=Y^R)uLW%]WTYL#*PrY;e+*5LLQf'U/DTK<)T\LBC_sj8EP`ndFr!n<?`&=Sant[2.QS;_6mkQ0#9DYj4d65'mBu\[`@\`]jBqJ\^F'+BGhdG%#ns-.Ymhp*C[ru=j]2_RK5rZ"Kn-K&oOo0ZN[.+BL..9#\B@a4UU\Ke3R`;,jJo,,Kr!_,*EH8*onlDqZf3IY'hSAHb`tj"Nlr/4%r@Z<Z;!XB,1Ca"Z)oFsPP;3H@Y$9%0'aB5jFR*N@b$YtH"g4<[AdGQBgL2t'9sqT$Y"LP':eo5fAa[brcqmK]^;!-KNc]:h;K4Mk%>H5Q.-8&808gbFT2'4'GJl@!,*j=g<eY3it3_sA840Z_mGn]B6L-jCSTbElIjbh;VSpc*k5NrdB.8<S@MG0jT%&AiZYk)"pQHXa1%o`c,O>?sY3@d@KS.s+/cgp@OtJ`IeP_dQZD_UqUa.J1)7)^26r6K@45XaS^Ze^;0F[LONdTZVl-qme.7>2VQ9'c%R`JqpmO5R@Nl%6/$u$KlPNB<T'l=e8,m9W#i&NAk'_]3bN#/%&TE#_rYq$@Teu%cu)]<Xc,t1353C99<&c]/\4V3f@c/?Z3mg@^[Ug'[*?l$kO]]0%A.*P/f83pEqN=99beh5oYC_Xa4&R?$l)Q@^e[WNVL1VVY=15X3BQZ!Z?9ka>XPaEiRgBtHA;YQ+PMlm=FudrO2LN?R^S+b7g=tUc%ZF?ALeU\-uBc#"Ri!?.IA3SPmH!VG=7Nsm`\]jeML9]PU,%3=$Q!(aeX+Mk4e(<YZ)9do0LSHT&b!*i<@r9j>rb]=*+[.L!c<@TH%DXoS9$qT0qI,Enjd3.QAOp`Id.?g/AGX5/u8i)%HJdbS[Y`K7PTCRSi0!".@IsR,TLGIia"k%3J:S)C>0FTZ(-7kOd5_!%HH<E#b%=GtK;n"Q609b-Wrg/o[][O*U[SM7).'O*ff9,IB,c,N*;*0u;R8SgeCkoR$gB%2b7Olf9;'&ph&K?]iRO1Dg'*/,\)3Y\l$-3_l$%RBSApp1S:sYZ,FC;^s1,V_&JX[V@PW/EU*b@PKfQ"oJ:8!EORG:B`qG3*H#1@9H,u%V[*[4E;Ua^-A*F:HD.C&okcV>7ds:l!Dj2%$L6,e7U`%YqeMUV.$h*9o8.H'.k)A/5a+dFDJ4U-gWZDAc5DT;93A>(V"[]_(5BC`$WkM&d`]-qD7QBS(-.5X2lcfj=>.LbIV;J#%l[n80Z[QR#L"]7WITq"K+KDY$[&'bAbn>F]0[LDufIS27N)$^M#('q)</LU1GhqAJ=<5VW'J9re3)r/+b5rl-d.1&mfg+sDKM%C0%Uu6MJi^fKf:e%,EV1kIM2%?`gX$Sj9b.?4sa3k(`7bC%A]B@#%;B\:N4:q8lc'O,XLXm0(h)#u*E@YLE?m;?$Pur&C#)oG7ok0`J%;XJTP4b<o1H3B2&#K!B./XDaOU[-54]/Cso:TB'T@2_@'6/)6B$`TuPPE#iXA7AU)q?*%#2?"fUAQQMD_9ROpHW]r[YB<GrR!F^n%;@7OcOb[)81a&cgFL^T9p&d?GQ=Jb?4FCkcC$l3I'93M-p-UfQ1?bFt$OCp`7iq#Vh\"nY'm=rf@61;:*k0SGHK'?B<&ZY3*M3$9%*QE'633&S)XL*hbZef4`LE@*-]5AVVE9n@)8jpR.Im4i_&>hd-Ntgs-iP\"NfGke-ZQLgU)3/3*&(X#a%tTU+1KGd]*6rmd9c1?4%0R*ARMmA.:1A)BXZ;T;!3e[s_YTW[)eY%Rq8U]NrE1i$-#Q[C@/N^=3o?+aG)q&FlDCcVK(RXF8gP(UcYQY\a?nHS6R.-XMH.1<o%@FS_ef;na!e+j.ld0p1&I8u(Y_NT1aC$h18aR^,gVM"5#GhgO#FU3,V9sl=&(XY>/Am%`)6Z5=9STSMA@k`=3cq@3bm9>][W2s74%YJ[;cEC>hU6G>CSj?CSC?#M-6<T_<m[NR^>/n\=2%p"EpDu=Li-/6o`h)iZTUc;3ETqm&"KX$EUR(1?\il(Srd86Q;f&2J#de2^R%,TUF<Cou=C)l5Ko)jU!>B[70fU?F=2D[_Y)1]DrHb<E7r%kf5nX4%l@LR7%EYfdU:F]r'0*K(q-gX\^DEh)CTZfNWGV'`Wi.R`2j%A0k\]WT>]%9*SB/`J8PeFlQ:Bq=NL:7RTk`>>-SBr%\-Q"d.7!(8OX]>_fTPF&T0G<(<fn</W?81of4EH54tR$iQ!`WBk:e6W9JY%_l=^E]>]2aVq`lgg@X3a%a`i[kpMJXRI8SWT'?7@&F(ZKUkKU?`)h6t6Wf$ed03^`&`]p6?&!#dcfI/F4mZE'ASn`7?0Q)t:cK^f%%]0=_Uh0B?6c,Z]ZGWVoE!0$nd37R4FL?Z^N39"="ki!,\gq3#LUDgUN9BtP$i>eHhBG.OW?,@cV,TB,Na/Tfk9i'NiJZNacDM_#%F#%Ac(I(X9$LVOZ)9_th-AqTo9r@YEjjQQR@8us!8e'>.Em9AE#Q[OnK<%2s5j8'me#k03<.Y7L-1GZ-S6E/^U:ND]^-W@knnQMf%@G`9,<`1Ms?QDo(5cSI_TWlulT`AOVaJSE-!AaUtIHaG+/l(hli84)m5d*ZnCiWRd`_J^WY-7OSPV.$g%#'0n014tGccZmUe%>V5%Md=o?,3)"UF:;:&lcP,kf!FZ=CTZf"o.seB?dEM'HL(/`8uG#->Dj_So5Ok.hgAb[dl3mXCYIN_"&If:%68h-4^'cuROsFE*&]I=%h?[t003i`Q@5R)K^Xf8PM[,lBL?`>)152^H3/`oq9og'nld+]K=b6mY]9P9D@PGH6.J)?3_If2oY-,Mnn>O=Tf76T$ZrV'JU1.`=%&o,-<Wb/,-gnlBuRAJl.<j]bZF<*NC+KD#e=c1@iKmA[#T#F05gA0m)@jark=n\r;gR.N+BFWWoWG##MR#9IJ)*_Es@DsUT]pnQ6%YMWhI?Dr;fWWNra&Fu`S^EhY'iDq,bI(3P)M'$UREq]6@NA/m1aCREg-V,PCga>XXO)j?V5Z7@[RqC1uaM#.%P"qk?0'bIhUGFg3%%\8D$3JI'Z!`$VQ6bt)EBa1epbD63p_R4LUgC.IE2kE4,Wj)u1oX[o<K0/6E6m6r&'ZpD_hnJOuLHL5cO?t2;OkNr>?',i)'>@#/%Y5'8e@dX5-il.6Efl2K4[iJLjZC9C7@T('':@&clFCnJGH8@XpGF[@C^$)gbcET8t)TCtQ/7Nb=q+S%SiI'cNmETA$qX/bY$.5H+%\-D$`#hCtH*($`<6n@baHW1)gL.=H^#C2O:F'=@,Gp<UV7upPsN.sjbA[f#Ioi3kU_>/`7qT'1.dPNT$6[U27al7Qh?'$d_=lU6B%K/Npd\)et!gNVnD+OaL9o[S`XO>N]s7G7c)3/9,_QYq,:?;OmAguB!AiD>AQ#-3!<oDrMi*^m,')_^n.eG"6+hUpl@OK7a)b\tE]%6Q8_D*ajTMhR(mir<8>#>>8(;NjX04MbTjaXH\K/FkN3:d2scH:#mp=YFFj9@VCJ4T*D>LO$WfOf45KdJMM=1\VrC!J-3!8`cE`s%2E:=0USgQa@XW<GP:73^%&N)a#oIdN>3jI411HZ3@J1MQR^s*ZiRmM-oJp*%Ea.Fej##/9ns"(>q."oTN\)m-@S`cbRs#jG5CJ<c%Op/9&,k\9#3*7uFh-@b=n(0k.[FY'B8*Ht;>:udt^TML'bpFG!f<J39eWr#*bm1'7J=XG<7r,/)dtoI`*``WdduFQidZ^&jZK?J<%,UN]:0?pno7$q&"KgeTJ)'fVB9bnC/nN=/9i%Ue#ROtFL_;W4TAs3F"o8u:`=Y5Cqj=SdYp6m_:B&A0.Z<K:YO136G!-LXm4u`Rq%cK,mJlKR>H0[2<^Sd%]WoRe$'&T9E4;*hpRV(Bm#GfF-gar[b6VC'!5W14O+X2Ag1kmb#qiM`sWCXO/8o7M<X,O(3EFYk2)B>'/V%O(Z-,T]Sqn@0!b(Sh3EaIMcWT>U-4@IMdR3RV\fIF>7@*aUSD!BCU3-2*6a@WG,1DFr9GqRUtrBH5f_RI;G'u5jt;qc',,@IMcaN%Sdr4K?+WJR"fKD#F7]s3i4Lc(X(Q%sBmZ4%GNV\Rd-od')oQ'`^#/GfD>>]W5Wc<]?bn)qYk9fUZ6oigY2B"nf+@SFR<.+7ZCI)1%>klZ#g+[:@+<j9L*sD14]qe0p+LP!HODdQE1Zqt[=kj3scJR:.8WRq_V?PI+2@?gMq0C!&]l^@]V'!YY9].f`5<KJL.kYq^67:N&%ikLpC#I_IVT$?FH4m.?q).km7=;t*fEg&:U6a_[rAK]jnQa'+?\?D42JJ8m\58l*Ia#QI27oc1i6gG2OP*sk'4F1U#e]"?S?H^p3%`hp!BVQ%(+!XF^!PQBKW;V&J_/OCJ2B/dV72d8m8c[i=a4jj,0q$s'_f<&=%E)p*gWNN9KM1irG29A`+$08X"N[Bn+Zpl?dcQE72%@^]NqkC#46/d-G7Z(<lTLn+BhT9A$t\s%UJjjRH:>u,Y3=+*\ieBj^aWa-N-1H&t<Ga59A#IERBAmKtUnQ7oiO/cdtcT,#jTc8rM%R^gXTEi&CQ$Z9adTB)Fm6s;80ik=%:E2:u;jiDM]&2cR=$$<hTSpY/fN>hKZ15khF.N'ikRjIoM%1:_$dIM%^W.k!bC;0,9O5Y8g%X=dUTD3I[O9Jt/N)+GX$l]@.uPc?(%)J,m_.&=od;CmHiK5d_F>.A`+9/8&a_U"KEp%MS>T6#C]&L(rZZ8W,a0ZI^2hTuKNpZJ!!%Z`8Y97W13=+S;PB,?u+^&'keJ,rBuNGFkX57`h+_#,&jdC7Yr+DH4ZWHBC)j:/bYP:TcMB;2ED:iP5IU7@q="TcLU":VBnkeU&?_%lIGedDb]M>h!SJB8_E1*K]f=iPsSX7-I_#8<ikE\DD%U4_0EqO:s1k90Tn;[V($=Jl?gA`4PA,u`2=/J7qF8BOj,qg(eYPpLm_*0%b+(/:JhBnNJ`moX&no-Z.tIuTUU@ot(>*?1[42*O[dI>N_i&i'VOl[OJpDi<IP5+1kcl4q6e]YN)KWb,lSt:6l6S0(7@n5t]<4A&%AEOlB!nAc6I)5;]Bf%uaW5c(=mTNBV@8dJpB%XME82KU96A1*LpX_$Uhc3HT.=a&,;,JGha\d;5Y/?A[T'kC@;K4YadHY+%&UiG#%:RSDXm]VJ$Wm5i5HFgj\_Krf/k-q_f3kRKlY6#9TN)Nab+JVG+'d2O-<$*5-$DhYOUIS8u+QH"Rf1'9C&].RfMBWC<;XdQl7+S<X%5Sf6UgqZSGeJ?6sclpr%Gg4aJ%o^/F\i3+g<k;X.X]F<#?=:0leO$?Z^[CV1?#"@dg5AhZP^E&nVdr_^.]Hs*LgmApUPPYFABO-+%g1[S/='Xakp`SDcZgL]E"JWsRh;RBm&mS`uN'BHq)LDd5JE#:2U)f_)nL.57hTr/:NiqK5$f%[N=ac>frO#bU`Xl^#koro*&F*h\%*kVt8r"m7oZrkrd&7pOTl@$f9_IPu(im@V9N\JAPT!<`)e=,4-8SH>q)oKrk@cMNIoc*:T\2s&Nanu;44d$W8ge2q_%GoG.EK;rp%"BaB[$E)t_Zp!ISacX*oTWqM":YS6QNjMW)#`UG$_%&EDXp4VKi!EK1Ctl`kKJQAQ!hK#G3hOEX#)?+D<Al[ZV,W1pV,VF3Z.4.+%kP_ejn.KWk=tFJUF"@Ge/;Um=jcIgcZ\/889c=1uiO5!ZXk,)O3m)8cb'(%dZn!%^*;LCZ20e:29*W9BEn&j$CS&T*Tt!sNR$pGe%AS+srUs'c*'M=,16H\duH4@pA4`[Ds8XUuirR&%`V="s)Q-/BG.cu:P2cHjJl\[SAh+X-93QOPS;N&]s!_,jaN`K&4-7Sk28#@);%6Q![<2=XkKD-tLd6;$Jslh7tOn#4W(&ZKC803n1o9bRkKR`Rnblp8%W7M1>WDmiBuTH0_Tp8+g`1si7UqEVZQ<)g@k<j0ej9'(I[%[*QB"#G^5F>R%saBJh;NcSVIWMHL6+`i=?V+k/eG>sB0OB</ETY]Nr9/]`$87L;\-=%3KgE`Y^:8oe#,BPfH2oIX=))DfTiJZWS@%gTP$kRB/6KQN1%;jC\74XkBZpben09H"g(FFS9Bj0O?7e4Hl\APtI(YW0Ng3af*Pnm:DYY(\J-;jI(r6XlPo:Yo7%c_:Z!KT<bUN%bDU$=B>A8@i.YakB990Y`qu]\b?@?A94pM5QVN0^Gg9J^)/QTgZIQ%P8Q0V*-4S*`R'\n%?.(\QWt?]F*i2dGCuBJFWY_/Uj5?oD%0deA#d8;JRbgjO+Bjs9HBA?IO>^&G0%FF_l\D!GO#M3qDr=I+Ss&jXi3crVQGLJD9Xu'P,:/<Zim.<-@#&C$V4SF&f\N>I&MHW!i%/_Hs(Kpb#[Ybj!7MQ<VB]BdTf?-B"S!LjG:VO9O2`hkIQb/U<H]BdWe:^bjc*LA7X]&c$<)E-s_V<,>TWB&DX`V.n4%<JI_0\1iD%eLn=k*a'Fo3CN=>5.iQRY"R9KMXIr%-?5'N3W%T*9\)=SG?$47[=5)D^:R^IH3[S_rBiOaXno*m:6!O2RZXHs4$J3o)WPk,@>dcf%KIJNF(=c;km+Z<DcrquC>s1,4LXCiRlVkTGH`2-MWfUYeXd3q]V^[Nff,tC'O[cIc7%3jmP82NeV%=n&p@RDml_A$lDHo*P=ud'.%N_(I"U<jjNH>g70]H/%tOr!p9A`Mpj?d_>b3>Cbb]!tUj%[Q<eEAb/?BNL!n/Br04H.-RGV:W#^W6ghiUQA]?/F'D"pcFFoQK=W[%9&j#WoYZELB)hW[SHE;_9,Bo3cn9^5]U_MCpVWNLlBL.o0M[c0kL]=t_t\X;SMb9pbFN^7cL0uJioWEX.Nb+NZ*<,^s")BA,lZU<%R(g'ahPL7R_e?rdoc;lO7>4*-%S#F(oUeQpa7QZ_%7o1b5,34lFU7A410_&K'k^ImL[s*!ZWt'F2WNK>??b^q"*e*kHS<*=7p.m(%iJ#f#qc3OBJQm\*CfkL.C8X.:<ESmkU1?F)gPl`=rr%K0lKb'JrSa@iI!gIs?(!*]iM4blbogD=4gqr*)6^9%*8`9b5agD@0Dg/j%R-iRJW&^)A;-q(jM`J4BBc1j;<`lgH$S[55DM-+AkC9Vh"$LFTaCQoBqe`R-O3u8D_t*Is94GTojeHno1/+_pNFtCt:b*;CU[D"6%&de>DQi@dP46XfSD=I-/2+CF]k65LA;@U[+8A^+m4m#P#Vk^&r*%*7D]])&\9XY8F_ca$+#UO7jBCO`;W7m52WcccgQn=8q$WZIO%c<uk3]N;`YZi[[\8$OS>_uT['D$MXbd8A3=6Bm!?S"ZK;fPFd+S*m3N9@3%Yqmdk&0:Sj#YJo=O19r'<.;(09/u1u0]t)u(-F:k9%6ArA(T\D+C\[3W)KV'5Y^rl*,pSd2J&'sP6WZW+6*/^s_R)IN*<rn'cS!cuhZJCCT2jK\fT>357POm6,b\^#3pq:@n<=iis7gmol%68#KogV\`<pS+"iG$+og9-58;?SS/*cAU/*0t&[mP_YBTGYc&<43>d\\#;O:S.Zj*:NdSZ)>.A'aRfpt,e;rIbD#l8#P.CZC3lAW%i4N;sTnpMR1Y6[=G436L`uW!N"IlK]F1mC(5bc+Bdr]u$0)A>`m-_S\Ob.d\O0a">.#>V%Onb[uC.Z&S@@E7b&N30c[LD;d$CVBJ%T30*SQtjEe%@6aV^P0slAA4!I@6#*6em$.nJ]U2bn@4&42B\Z/C1pF_PsL?<_7mii^>`MV4;V-SUrMYN./;j(G#=u/0HJ4i1rjDA%hP5g]hUBE_.CJJgOQJOI:p`m"4=p+>2(k#5W.\?KLQ=m-,RiqlX-VQ,$W^)J/W,oCf0QO[g'0>I%l&^V'%RZWPN9<64,0>b25+3h%efG!>I^>d^,E@`=fE^k=i"41d-$rSNflE+i:TkgTgTZk2e:7@pFr=O%B.:[paSeGLFjQ'_fb,&R?.qRRYsp&*l*G6PL&/*7:+<P#%aSN*<=Y2T!rACmPTL/3YcWj;H(0PZsUl9KM'HX3nd2H$3I,X:Fb3jM8p8CbMi_Rkq$ffMgP@/L.oMA^V3fjsik>m&C'MD8`%e3Z4%1pZN@?q*UX<)P&gLBmht<(O;mhn76oaN&WY2#pp:Knu=^4)3=<YT_/1J9_P[Y^-_2B]3l>^4[_>3>NEF%BN/cR[OUTVLX3>.Va;4%Mbi@INC\FXD(/^K:1]%-e!m8$RR!$DY0Ssi[?_Vsj%CsW0\f)<-5h#);I'pg(GD,]RUu2Yj)A;Ebo#\Ff>Xa<C#0?\h4h2PgLfOs%\=H=P=PL0-7\p/\ONKQP\lZ"4?YYEWfKo,I0(,O'20Mnk]P51eJKXkUm;Q),7sDm_*$+ZnJI8%)N?a,+e8-QZ1,<R_0WjUpSb:W$%:D^6_Z=QOsL+-^DAQU8p6Bl+5@@:%E^YRI#Lg<8b]7<b.M>)g`hq_Bc3-_j\:Y9Tle_1>;!&1NrE0CMgn*,`as-CTXWtYt`jak26%`mX2iU3;o!QDm%p-PHlFW!o07"hQ2ffuLc-]^I_t*:8nVZTmX5`1#K<O02c46j\nIB#;kg9kRUEE4`u>FGe$o<`aO]pW#>&X<>.T%(tYa>D5K3pl2md"6K/`<jg:fbQ?DSnY6g>J7Pi<[:jC(90Qs[?5!+D%YP0doXJ'#,f>>\(ThqVfcqoguC)P</K';c/2>Y+Hk?:,_%=mW!8Z.1*ke6fR-]Zp5s'U0GU3toOt\ADV'+Cr\7VHRfBW^4_DiM#PAS=(EKqh%Po]ZCVa'RM>AoVZV;SHq`e-]dA:ba2a;8sBr'%78#b6+-'CX;:mS267#P?&M+Q&dHlr`AaNo9Bs\BL[MrS[h=1QKg2g``6*o4$Xf-/64LV5u0]0ioX!JJP:_qmSdG60Xna1oN_!3Xo%'F<&92J@S^JS-e)AD_Pt^'pc0(f/F!;!;E=XZhK=&sH`V0cA.\QqL:=-<f_FGF-GZ/+q0Yq,lW]SX$92_U*<@MefkJUf3gZcuRZ9%VpC_]Bjrbj4DeOE_I`!gX^eFM2D"_*Z6'e*[Y,SR@erD'L>&S4\&ZFu)k;gb_g\#8+dBt@PdlbZ&MP-)/#bW[=(Z1;U%C+&cjn/<%nNcWC;-L,(o?mj"9/+$N4R=X^W^NV0'&G`fCFeeVmPW<a_XPp%W#BEL/\JHn*YDmINO#?$aZr!nI'Uf9/R>XAQED"OFq*OfGBN,:%[/!)DC6<Vbdfm\DdPPBMkPB4IHap@fbp@%.s5nL-Tq5!S*;[e)>T.fV>)tDb]I[6SCMSP2ZuFZ+;.[6n%i_pg8_44%/2+m<gUoNl%NkAf]=K%cPV&J1TI*@RkL:"O2m?"al/g/U-_Gs"X?au>F-C8-1D<c(s__o+I8a:s,LbHZ;X2>DG>Z.QOi&J([M(h7Ob^FVMI!&e%%"04o9B"HhOeb3l/NU;sJ-".+W>=?@![ZTJ0XX(""gb*!a?fI&L8O!uL&6WTTc-W$:&QsU>%"d@n(5@7o##-$3L]A>20<;p`RNR7C%`Ypl$+Mr;7Ps"q:Q+Vffi>trg%B8FIclnZ:*'ZQOB$B!`Ftd">$$3'+,@[==XefV<1Hs5XVZ)NDo7>ks5+\=A4s'\Vd`97$`r/=f%_V,FDI9Pe9DPrWn3/G<o+HLVP/<\Q>9O0Xp1Ni!L0D4i><qYu.5(DmV6o\X1Be8)-0>i$XXr$]<9>-^#TbkbYUpmh;@;NCnI@IIZ%d>Z':p3qD#'n&0kiIkTqUQiV6671ed9d7##^5_E0,.9$I<4moE&I`*K`Ioob@&gT2[M*^*XXIVW4fRIY3<N:]*%>CVa.lT,1<dL-%KeIh-U_r5j;LqMD.[o=iXP.Re0LOS(miQ8U\j0K)7!JJfH2:(>%0g:#!Mbc#9n-=")7ZT*B*qEVhJa#pHFAY!PG)P'4jrJf\_k>&%e\LI4`cSs$o5Bi?r0S^Xm"a"WT'uaY`;j3.67&;*?RQ)"719?M#8li+YKd&5Y743Zo\+b=(B.5iZHtT\OJP7Ue3\ip(US:QTt+SF%M7tgX7Q-<E44i8V47OWLjI$$9s%OK4-hh+g[lu"V[^c\a5g\q&+//sU7)ZZ.VfSj-aUUPm'&g8D?Cu2[@ETX0T5BEm:6!<oA4rF)%ZLV'&At(>5^7HWqVLf%5Eb<@[1FhfQ:Wh"E#ItDJRUr"qfF@^UK,<fuN2Xq%L/<4Q`4ji2q_(WsOF4e(7?V"!\F>n+[r%`c!g23i%k??0c[AO=*i$d(qm#?iX$RGI#2uKFjk+`rVTC7gPqo\+qb&u\I7'u#c-0'$>&boVgKR@3O2!BjmELA+S?rJ1>Hkn"*T.I?!*j@H%%MTY^[g5U?cZC28%73t3SjVI+.?A?j$1gI?Q(8"HbBfS&(>]US);IFc1p1@$Dd.NcD5kV'-W9?!2c&p3PoQDI,X#7!7+.J5,C=akG%"k</"f4K7Pb+[B#"aH"PEc"4O3BZ,D-:;>(QrG;Yb]H7!<#iK1BcTVr0&*X[L/+@XH'(%SQ@:_GF*+W*9##o)/lR1\?&tV065$,O%UBKt"lM3EaRdO!:'sE#lk21cI`d0_<SQZ[:d=Xpj"lcaor_"JbSgP-dC#(AOUn9+TOAt8Cr.KuOeV8XZmUh"K>a/[igTi'Ee^;$7%/I8Jbo_:-VDW`Ajp",88#mdD.$JR=u3c*!M,+2[k(G<qQN7cks=ee&&J"Y%dl::S[g!>h_2_:+V1XG=hjcQ.,qQ]S4%R8iK&#6Eg%/TLdTe%W7d7)nT2hq/QjSZ+c=_bGpXH`jDGh/kX=jTK7oGSpeugtcO`/r.%iO72S(kp]tH<_%AJ=C7rN`Kljho*L<7LpAT"#t)Eu%Y>iq;)sin..%o^B>F&d\K2b!Oc#F]gP,Il;#'4M2OL"It^,"3d=dLt#KS>$JM%5Y_#:En!Y2nH51Dm82XnBrNg>+ImbS.,@q3\^7%$0H+JrjEb=4(XY$fm!#o<j+h0CHU]@+VU.hBqu<9'0!QFF>AVqKL^8!<kkK[5<L8T@irl_==P=G2c<C7n`JjUAcChXT3sA4p5?P'%_$`5mZ=K+-(e&P?qRc.sMWfr?nJ'A>YV;#:s1m:(Nr!?<,J%9\5EI4\%&aPS],nkX;)Lk77TG%oJXBZ=JWaDL6@F:`HFeXiM_o4R%US@94c:qEg1=S']m>O(S>2nZ0eq=bi>&3,2%*t8SF<5OHH2rl5"Z/1*3[e1K/u\kG)*#$>)&dNrBEdQn6bP5\X./W,EEm=*Og`P6%AC=7URf:(?!Q6L5$9kc;H^SMn`_>Oh"V9fS:LKXK5J]G;$@Hlb0C^8b59=!</o9.N5O\f9Ctr^5mmgkDci2@)c</MdNS18%:Gub-%>)dr@CNeF-765cgCGt3DX)b@8>'pVlQJqV)XNJI-NI/$TQo;R6gGppmZdq.&I(IVUm/$+rIL8XtC""gQT3GcoeprEg(Q@0Dk/5@_%?DKqIS7W4^N[0H:$mC9_fkP#"aB"e7[+.KfCEbaDeV<Q?>AXXa)IQ@/:X\PaAM:=Y(Du"3oQ5XM^YG".-5RQt,3+.OOPt1coZ^`P%nOjJ((SYRrqC<.@TG\W9Q:OKM2o1Hor3GTtp6>-h&>KE$6HVg#/!BIQ",bLo/T!kYp<>0T-7$SSYC9Hh+n%Wne.lN\iHCQmFFu^K%6i?"aO?s<mZ.bKI?A#R:]tP30#N_ZqNOsBaNiOH:B3P?.3(0:Z6.\$M(JVhCc+Kts4/KWN:BS5UgI8K9#C))1(K[7O+eDCQs#;m"%;d$)dHJjOj2,!NN/4qF"!ep3U+qI\KTcQ)N2P2K^:LHI'1sK2"q0!7lFqdH.mD<"$m2AFS*(WMo;i(elkrPHUl7RS'RdP'.k@3Y.%C7>;.5.T2%.k-I`&WK=/q/$'k%ce*3T&[lo,k@=">:fpf<n*U)APc:Ac7/Q8nn,DLo:AQ]=p@#dc=te8F*IR3LRbqQ9IppWQp0b;%k;ZZKeJ!DsEH8\\[M.Po8sQ(!]Zq+:C&3c'HP[4'kb.Lk9.*`q]VGe*]'H^DX=cmid*sNHPfa5;6/bRC4jtg!Yc&MP3i6b8P?0g/%Os-25WDm2(EQ<&%;;EdG0k?B99,#"mdGPDUetRlf<8/2Ioi$CjcT!FQ98t0MPZa9tE,[[e\MUe=%53_G96@?3L+([+M5'b&3-<9A%9%EC9-CGt8h!Qq`DNq%,A,PtD2XI]s`cpWt5:pY;:T;#].:'t;MRt@V$hMsp\JT546`m3I%fKj)6]_1f!I('S;gVg6M:Ti7._n7l%qYG:1P7#C!M!4W=YsolYn@[LS+1J7b$=bmj\Zm(g6o@\K)S;-RE`q/;G+&SUpUUa!E$PipB?o6,f;B#6[Oj.DD7S.@[0qm8/-j)F%=p_1$dV&H0+0]PhS*c?8\eZ\&ZT[JUFh9dlR-Hi$E=AcSIJtd"`*Rj,m+-,d8R6)6<jRN&McD2O@lTbRnX`Q;H!J[SrQ(TdlFli]%m;a&9+0L*@l9>.lm69Fd`Kh<#Ml,K,M)rsmlZo3[-1M7^Y\\5PD[n&"PVUFaa/JA[bmjQo>-t\_ZAPq(2;s[e`K;&,=QAeM^'-d=%m)>UBg67*@U.=uE7t@3*^f+G2B+68ug)SXG0LPWio544X1qglOPjIdH]*ha@gA]kp3<N6OQN!34Y_9UKT9L!_X'>/<*(KE8-K[0[%Vn;>*M@AHsl3RidOC(=t\2iM7IgI8)Q-bb,ImZj>,9b_Yi?f,PU.AM46B+T/8c9q\rNIqNcSm,''bsFmE&?fuR^B'NDF?Cl)@5[-%q,[J?(5G1d7$-.`OP3"S=S:e=4cnDu#5M4[-R#<3G=ir:7#)'=eHHhJKmhj+@DnM0p'DpJifK'M_:ZZ20GC?T$W%2EcdRDjF3q#B%MK)i0CIorkYqLpQ793NONq$"1']*b;ORhY3(lW^0'S@)klXDOMDI_..n0Z>0#Y.QSj"VB,B%<3`i<5)snfq@-cj1l;B[]3X&QC2Y%4b,".n&<[Dg^J>f@5BA%1+kE%@RSJ:nBA,`09,[7]//BE+5<^7HVkdWm4M?/&cjVmq[AZHb^<j5(YRksd&6l!qP;C0'5pB)'@#(M%e-h-0+qf&fhTEf:L.G@V=kZFSXQ=%1F8TTE_ja.,^3]Rtjh%F/?JaK:jmN)nJ,\B,YJ.^KiU1pYDdU2lHiN#Z&%@&"]=NF^k3`-7%rS9R2jm%WqG9?81^;%;VnDi7f"!X@^o<5lSqO;+.rbhu'a6<~>%AI9_PrivateDataEnd